#+title: Emacs Configuration
#+date: <2022-02-20 Sun>
#+author: Kristian Alexander P
#+email: alexforsale@yahoo.com
#+language: en
#+startup: overview
#+options: d:t toc:t

This configuration was inspired by the [[https://github.com/SystemCrafters/rational-emacs][rational-emacs configuration]] from the [[https://www.youtube.com/c/SystemCrafters/videos][systemcrafters series]]. So instead of blindly copying every snippets of /Emacs/ configuration I've found on the internet, I'm taking the lighter approach and *try* to only use what is necessary.

With that in mind, I'm breaking down this configuration into separate /pluggable/ files that can be /included/ on demand. But the general goal is to only use what's already built-in to /Emacs/ as much as possible. Just like many other /dotfiles/ I've used so far, this configuration will be generated from a single /org-mode/ file (the one you're reading right now).

By default this will creates an =emacs= directory insinde =~/.config= or wherever the =${XDG_CONFIG_HOME}= is set. If you're using [[https://github.com/plexus/chemacs2][chemacs]], or if you want to use the standard =~/.emacs.d= directory, modify the =:tangle= directive inside each heading's =:PROPERTIES:=.

To easily toggle the additional packages, create a =config-user.el= file inside =user-emacs-directory=, usually =~/.config/emacs=. This file also generate =~/.config/emacs/config-user.el.example=:

* Example =config-user.el=
  :PROPERTIES:
  :header-args: :tangle (expand-file-name "config-user.el.example" user-emacs-directory)
  :END:
** Commented header
   #+begin_src emacs-lisp
   ;;; config-user.el --- Emacs configuration file -*- lexical-binding: t mode: emacs-lisp -*-
   ;;; Commentary:
   ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
   ;; for details.
   ;;; Code:
   #+end_src
** And set variables for various packages.
   #+begin_src emacs-lisp
   (setq user-full-name "Kristian Alexander P"
	 user-mail-address "alexforsale@yahoo.com")
   (customize-set-variable 'org-directory (expand-file-name "Documents/google-drive/org/" (getenv "HOME")))
   (customize-set-variable '+org-archives-file (expand-file-name "archives.org" org-directory))
   (customize-set-variable '+org-capture-todo-file (expand-file-name "todo.org" org-directory))
   (customize-set-variable '+org-capture-links-file (expand-file-name "links.org" org-directory))
   (customize-set-variable '+org-capture-notes-file (expand-file-name "notes.org" org-directory))
   (customize-set-variable '+org-capture-habits-file (expand-file-name "habits.org" org-directory))
   (customize-set-variable '+org-capture-projects-file (expand-file-name "projects.org" org-directory))
   (customize-set-variable 'org-agenda-files (list org-directory))
   (customize-set-variable '+emms-music-dir "~/Music")
   (customize-set-variable '+config-doom-theme 'doom-solarized-dark)
   (customize-set-variable '+config-standard-theme 'wombat)
   (customize-set-variable '+mail-directory "~/.mail")

   ;; example theme customization
   (when (string= "doom-solarized-dark"
		  (or +config-doom-theme
		      +config-standard-theme))
     (setq doom-solarized-dark-brighter-text t)
     (setq doom-solarized-dark-brighter-comments t)
     (setq doom-solarized-dark-brighter-modeline t))
   #+end_src
** UI Packages
   #+begin_src emacs-lisp
   ;; UI Additional packages
   ;; (require 'config-all-the-icons)
   ;; (require 'config-doom-modelines)
   ;; (require 'config-doom-themes)
   ;; (when (display-graphic-p)
   ;;   (require 'config-theme-magic))
   (require 'config-helpful)
   (require 'config-which-key)
   ;; (require 'config-ace-window)
   ;; (require 'config-perspective)
   ;; (unless (or (featurep 'exwm)
   ;;             (string= "exwm" (getenv "DESKTOP_SESSION")))
   ;;   (require 'config-centaur-tabs)) ; doesn't look good in workspaces
   ;; (require 'config-rainbow-mode)
   ;; (require 'config-rainbow-delimiters)
   ;; (require 'config-hl-todo)
   (require 'config-diminish)
   ;; (require 'config-dashboard)
   ;; (require 'config-alert)
   ;; (require 'config-smartparens)
   ;; (require 'config-treemacs)
   ;; (require 'config-vertico-posframe)
   #+end_src
** Editing packages
   #+begin_src emacs-lisp
   ;; Editing Additional packages
   ;; (require 'config-multiple-cursors)
   ;; (require 'config-yasnippet)
   ;; (require 'config-geiser)
   ;; (require 'config-yaml-mode)
   ;; (require 'config-toml-mode)
   ;; (require 'config-nix-mode)
   ;; (require 'config-markdown-mode)
   ;; (require 'config-rust-mode)
   ;; (require 'config-visual-regexp)
   ;; (require 'config-undo-fu)
   ;; (require 'config-block-nav)
   ;; (require 'config-ansible)
   ;; (require 'config-jinja2-mode)
   ;; (require 'config-hydra)
   ;; (require 'config-general)
   ;; (require 'config-evil)
   ;; (require 'config-aggressive-indent-mode)
   #+end_src
** Org packages
   #+begin_src emacs-lisp
   ;; Org Additional packages
   ;; (require 'config-org-roam)
   ;; (require 'config-org-elfeed)
   ;; (require 'config-org-gcal)
   ;; (+config/org-gcal-setup-sync)
   (require 'config-org-journal)
   #+end_src
** Email packages
   #+begin_src emacs-lisp
   ;; Email Additional packages
   ;; (require 'config-notmuch)
   ;; (require 'config-gnus-alias)
   ;; (customize-set-variable '+config/mail-fetch-program "mbsync")
   #+end_src
** Various additional packages
   #+begin_src emacs-lisp
   ;; Shell Additional packages
   ;; (require 'config-vterm)
   #+end_src
** Completion packages
   #+begin_src emacs-lisp
   ;; Completion packages
   (require 'config-vertico)
   (require 'config-orderless)
   (require 'config-marginalia)
   (require 'config-consult)
   (require 'config-embark)
   (require 'config-corfu)
   (require 'config-cape)
   (require 'config-dabbrev)
   #+end_src
** Tools packages
   #+begin_src emacs-lisp
   ;; Misc tools packages
   ;; (require 'config-flycheck)
   ;; (require 'config-projectile)
   ;; (require 'config-lsp-mode)
   ;; (require 'config-git-gutter)
   ;; (require 'config-pass)
   (require 'config-magit)
   (require 'config-git-modes)
   ;;(require 'config-slime)
   ;;(require 'config-sly) ; a better repl than slime
   ;;(require 'config-paredit)
   ;; (require 'config-telega)
   ;; (require 'config-emms)
   ;;(+config/emms-set-mpd) ; when using mpd
   ;; (require 'config-w3m)
   ;; (require 'config-pdf-tools)
   ;; (require 'config-gist)
   ;; (require 'config-ripgrep)
   ;; (require 'config-restart-emacs)
   ;; (require 'config-hugo)
   ;; (require 'config-devdocs)
   ;; (require 'config-guix)
   #+end_src
** Theme
   #+begin_src emacs-lisp
   (defun +config/load-theme (theme)
     "Load THEME after new frame.
   Also for the current frame"
     (progn
       (load-theme theme t)
       (add-hook 'after-make-frame-functions
		 (lambda (frame)
		   (select-frame frame)
		   (when (display-graphic-p frame)
		     (load-theme theme t))))))

   (cond ((and (featurep 'config-doom-themes)
	       (featurep 'consult)
	       (display-graphic-p))
	  (+config/load-theme +config-doom-theme))
	 (t
	  (+config/load-theme +config-standard-theme)))
   #+end_src
** Footer
   #+begin_src emacs-lisp
   (provide 'config-user)
   ;;; config-user.el ends here
   #+end_src
* config.org
  :PROPERTIES:
  :header-args: :tangle (expand-file-name "config.el" user-emacs-directory)
  :END:
** header
   #+begin_src emacs-lisp
   ;;; config.el --- Main Emacs configuration file -*- lexical-binding: t -*-
   ;;; Commentary:
   ;;; Code:
   #+end_src
** variables
   #+begin_src emacs-lisp
      (setq bookmark-file (concat +emacs-data-dir "/bookmarks"))
   #+end_src
*** org
    #+begin_src emacs-lisp

    #+end_src
** loads the builtin configs
   #+begin_src emacs-lisp
   (require 'builtin-org)
   (require 'builtin-editor)
   (require 'builtin-tools)
   (require 'builtin-ui)
   (require 'builtin-email)
   (require 'builtin-shell)
   #+end_src
** footer
   #+begin_src emacs-lisp
   (provide 'config)
   ;;; config.el ends here
   #+end_src

* early-init.el
  :PROPERTIES:
  :header-args: :tangle (expand-file-name "early-init.el" user-emacs-directory)
  :END:
  #+begin_src emacs-lisp
  ;;; early-init.el --- Customization before normal init -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
  #+end_src
  This file is loaded before the package system and GUI is initialized[fn:1].
** Set =+emacs-data-dir= variables.
   #+begin_src emacs-lisp
   (defvar +emacs-data-dir
     (if (getenv "XDG_DATA_HOME")
	 (expand-file-name "emacs" (getenv "XDG_DATA_HOME"))
       (expand-file-name ".local/share/emacs" (getenv "HOME")))
     "Location for Emacs data files.")
   #+end_src
   This will set the variable ==+emacs-data-dir= to =~/.local/share/emacs=.
** Increase the GC threshold for faster startup
   The default is 800 kilobytes, measured in bytes. I'm not sure this affect much if we only start /Emacs/ once for the server.
   #+begin_src emacs-lisp
   (setq gc-cons-threshold (* 50 1000 1000))
   #+end_src
** Prefer loading newest compiled .el files
   This applies when a filename suffix is not explicitly specified and load is trying various possible suffixes (see load-suffixes and load-file-rep-suffixes). Normally, it stops at the first file that exists unless you explicitly specify one or the other. If this option is non-nil, it checks all suffixes and uses whichever file is newest.

   Note that if you customize this, obviously it will not affect files that are loaded before your customizations are read!
   #+begin_src emacs-lisp
   (customize-set-variable 'load-prefer-newer noninteractive)
   #+end_src
** Native compilation settings.
   This only applies to /Emacs/ built with =libgccjit=[fn:2]. Last time I used it doesn't work well in /exwm/.
   #+begin_src emacs-lisp
   (when (featurep 'native-compile)
     ;; Silence compiler warnings as they can be pretty disruptive
     (setq native-comp-async-report-warnings-errors nil)

     ;; Make native compilation happens asynchronously
     (setq native-comp-deferred-compilation t)

     ;; Set the right directory to store the native compilation cache
     (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" +emacs-data-dir)))
   #+end_src
** Don't use =package.el=, we'll use =straight.el= instead
   More about [[https://github.com/radian-software/straight.el][straight.el]]
   #+begin_src emacs-lisp
   (setq package-enable-at-startup nil)
   #+end_src
** Remove some unneeded UI elements.
   I think this is from /rational-emacs/.
   #+begin_src emacs-lisp
   (setq inhibit-startup-message t)
   (push '(tool-bar-lines . 0) default-frame-alist)
   (push '(menu-bar-lines . 0) default-frame-alist)
   (push '(vertical-scroll-bars) default-frame-alist)
   (push '(background-color . "#232635") default-frame-alist)
   (push '(foreground-color . "#FCFCFA") default-frame-alist)
   (push '(mouse-color . "white") default-frame-alist)
   #+end_src
   This also sets the initial /minimal theme/ to avoid having the vanilla theme.
** Set location for /straight-base-dir/, must be set before straight.el initialized.
   Ideally I should separate the repositories for each flavor (/doom/,/spacemacs/ etc.), but I sometimes want to quickly test a minimal configuration with /straight/ without re-/cloning/ each repo.
   #+begin_src emacs-lisp
   (customize-set-variable 'straight-base-dir +emacs-data-dir)
   #+end_src
** Adds footer since this is the end of the file [[file:early-init.el][early-init.el]]
   #+begin_src emacs-lisp
   (provide 'early-init)
   ;;; early-init.el ends here
   #+end_src
* init.el
  :PROPERTIES:
  :header-args: :tangle (expand-file-name "init.el" user-emacs-directory)
  :END:
  #+begin_src emacs-lisp
  ;;; init.el --- Main Emacs configuration file -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
  #+end_src
  [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][The Emacs initialization file]].
** Add the modules folder to the load path.
   #+begin_src emacs-lisp
   (add-to-list 'load-path (expand-file-name "modules/" user-emacs-directory))
   #+end_src
   This way we can load them individually.
** User site-lisp directory
   In case I wanted to add some files that's should not be included in the git repo.
   #+begin_src emacs-lisp
   (defvar +site-lisp-dir
     (expand-file-name "site-lisp" user-emacs-directory)
     "Location of user site-lisp directory")
   (add-to-list 'load-path +site-lisp-dir)

   ;; create the directory
   (unless (file-directory-p +site-lisp-dir)
     (make-directory +site-lisp-dir))
   #+end_src
** Set default coding system.
   #+begin_src emacs-lisp
   (set-default-coding-systems 'utf-8)
   #+end_src
   This sets the following coding systems:
   - coding system of a newly created buffer
   - default coding system for subprocess I/O
   This also sets the following values:
   - default value used as =file-name-coding-system= for converting file names
     if CODING-SYSTEM is ASCII-compatible
   - default value for the =command set-terminal-coding-system=
   - default value for the command ==set-keyboard-coding-system=
     if CODING-SYSTEM is ASCII-compatible
** Increase large file warning size to around 100MB.
   Maximum size of file above which a confirmation is requested.
   #+begin_src emacs-lisp
   (customize-set-variable 'large-file-warning-threshold 100000000)
   #+end_src
** Bootstrap [[https://github.com/raxod502/straight.el][straight.el]]
   #+begin_src emacs-lisp
   ;; redefine `+emacs-data-dir', it seems in Emacs 27
   ;; variables defined in early-init.el doesn't carry-over here.
   (unless (boundp '+emacs-data-dir)
     (defvar +emacs-data-dir
       (if (getenv "XDG_DATA_HOME")
	   (expand-file-name "emacs" (getenv "XDG_DATA_HOME"))
	 (expand-file-name ".local/share/emacs" (getenv "HOME")))
       "Location for Emacs data files."))
   (unless (file-directory-p +emacs-data-dir)
     (make-directory +emacs-data-dir :parents))
   (defvar bootstrap-version)
   (let ((bootstrap-file
	  (expand-file-name "straight/repos/straight.el/bootstrap.el" +emacs-data-dir))
	 (bootstrap-version 5))
     (unless (file-exists-p bootstrap-file)
       (with-current-buffer
	   (url-retrieve-synchronously
	    "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	    'silent 'inhibit-cookies)
	 (goto-char (point-max))
	 (eval-print-last-sexp)))
     (load bootstrap-file nil 'nomessage))
   ;; run org immediately
   (straight-use-package 'org)
   #+end_src
   This is a modification from [[https://github.com/raxod502/straight.el#getting-started][the original snippets]], so it needs to be evaluated regularly to merge any updates.
** Separate custom-file, and load it if exists.
   #+begin_src emacs-lisp
   (setq-default custom-file (expand-file-name "custom.el" +emacs-data-dir))
   (when (file-exists-p custom-file)
     (load custom-file))
   #+end_src
   This file is usually modified if you made changes using the =customize= function (e.g. ~M-x customize~).
** In order to have emacs use this file as its init file, first we have to convert this file from /org-mode/ into the usual emacs-lisp file.
   #+begin_src emacs-lisp
   (defvar +my-emacs-config-file (expand-file-name "config.org" user-emacs-directory)
     "My Emacs `org-mode' configuration file.")

   (when (file-exists-p +my-emacs-config-file)
     (require 'ob-tangle)
     (org-babel-load-file +my-emacs-config-file))
   #+end_src
   This is *important*, this /org-mode/ file needs to also resides in the =user-emacs-directory=, this variable is dynamically set depending on where your =init.el= file. So if you already have that file inside =~/.config/emacs= *before* /Emacs/ started, that's where the =user-emacs-directory= (*only* if it not detect an =~/.emacs.d= directory, so remove that directory first if you want to use =~/.config/emacs=).

   Also, any /codes/ inside this file will automatically evaluated by /Emacs/. So you don't have to manually /require/ it.
** per-user configuration file, not maintained by git, so I can have different setup for my desktop and laptop.
   #+begin_src emacs-lisp
   (if (file-exists-p (expand-file-name "config-user.el" user-emacs-directory))
       (load (expand-file-name "config-user.el" user-emacs-directory))
     (when (file-exists-p (expand-file-name "config-user.el.example" user-emacs-directory))
       (load (expand-file-name "config-user.el.example" user-emacs-directory))))
   #+end_src
   If there's any /modules/ or other files needed, this is where to place it.
** start server
   #+begin_src emacs-lisp
   (require 'server)
   (unless (server-running-p) (server-start))
   #+end_src
** Adds footer since this is the end of the file [[file:init.el][init.el]]
   #+begin_src emacs-lisp
   (provide 'init)
   ;;; init.el ends here
   #+end_src

* UI
** builtins
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/builtin-ui.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-builtin-editor.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
**** Default fonts
     Got this from [[https://emacsredux.com/blog/2021/12/22/check-if-a-font-is-available-with-emacs-lisp/][emacsredux]]:
     #+begin_src emacs-lisp
       (cond
        ((find-font (font-spec :name "Source Code Pro"))
         (set-frame-font "Source Code Pro-10"))
        ((find-font (font-spec :name "Fira Code"))
         (set-frame-font "Fire Code-10"))
        ((find-font (font-spec :name "DejaVu Sans Mono"))
         (set-frame-font "DejaVu Sans Mono-10"))
        ((find-font (font-spec :name "Ubuntu Mono"))
         (set-frame-font "Ubuntu Mono-12")))
     #+end_src
*** Make scrolling less stuttered
    #+begin_src emacs-lisp
      (customize-set-variable 'auto-window-vscroll nil)
      (customize-set-variable 'fast-but-imprecise-scrolling t)
      (customize-set-variable 'scroll-conservatively 101)
      (customize-set-variable 'scroll-margin 0)
      (customize-set-variable 'scroll-preserve-screen-position t)
    #+end_src
*** enable visual-line-mode
    #+begin_src emacs-lisp
      (visual-line-mode 1)
    #+end_src
    When Visual Line mode is enabled, =word-wrap= is turned on in this buffer, and simple editing commands are redefined to act on visual lines, not logical lines.  See Info node (emacs)Visual Line Mode for details.

Turning on this mode disables line truncation set up by variables =truncate-lines= and =truncate-partial-width-windows=.
*** move point to help window
    When set (non-nil) the point will select automatically to the help-window, I found this quite distracting so I set this to the default.
    #+begin_src emacs-lisp
      (setq help-window-select nil)
    #+end_src
*** always maximize frame
    #+begin_src emacs-lisp
      (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
      (add-to-list 'default-frame-alist '(fullscreen . maximized))
    #+end_src
*** footer
    #+begin_src emacs-lisp
    (provide 'builtin-ui)
    ;;; builtin-ui.el ends here
    #+end_src
** all-the-icons
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-all-the-icons.el" user-emacs-directory) :mkdirp t
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-all-the-icons.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (when (display-graphic-p)
      (straight-use-package 'all-the-icons))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-all-the-icons)
    ;;; config-all-the-icons.el ends here
    #+end_src
** doom-modeline
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-doom-modelines.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-doom-modelines.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'doom-modeline)
    (straight-use-package 'ghub)
    (straight-use-package 'async)
    #+end_src
*** variables
    #+begin_src emacs-lisp
    (customize-set-variable 'doom-modeline-height 15)
    (customize-set-variable 'doom-modeline-bar-width 6)
    (customize-set-variable 'doom-modeline-minor-modes t)
    (customize-set-variable 'doom-modeline-buffer-file-name-style 'file-name)
    (customize-set-variable 'doom-modeline-github t) ; uses `ghub' and `async' package
    (customize-set-variable 'doom-modeline-indent-info t)
    #+end_src
*** hooks
    #+begin_src emacs-lisp
    (add-hook 'after-init-hook #'doom-modeline-mode)
    ;;(add-hook 'doom-modeline-mode-hook 'size-indication-mode-hook)
    ;;(add-hook 'doom-modeline-mode-hook 'column-number-mode-hook)
    #+end_src
*** set icon when in daemon mode
    #+begin_src emacs-lisp
    (when (daemonp)
      (setq doom-modeline-icon t))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-doom-modelines)
    ;;; config-doom-modelines.el ends here
    #+end_src
** doom-themes
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-doom-themes.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-doom-themes.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'doom-themes)
    #+end_src
*** variables
    #+begin_src emacs-lisp
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    #+end_src
*** config
    #+begin_src emacs-lisp
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-doom-themes)
    ;;; config-doom-themes.el ends here
    #+end_src
** theme-magic
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-theme-magic.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-theme-magic.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'theme-magic)
    (when (executable-find "wal")
      (require 'theme-magic)
      (theme-magic-export-theme-mode))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-theme-magic)
    ;;; config-theme-magic.el ends here
    #+end_src
** helpful
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-helpful.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-helpful.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'elisp-demos)
    (straight-use-package 'helpful)
    #+end_src
*** keybinding
    #+begin_src emacs-lisp
    (require 'helpful)
    (define-key helpful-mode-map [remap revert-buffer] #'helpful-update)
    (global-set-key [remap describe-command] #'helpful-command)
    (global-set-key [remap describe-function] #'helpful-callable)
    (global-set-key [remap describe-key] #'helpful-key)
    (global-set-key [remap describe-symbol] #'helpful-symbol)
    (global-set-key [remap describe-variable] #'helpful-variable)
    (global-set-key (kbd "C-h F") #'helpful-function)
    (global-set-key (kbd "C-h K") #'describe-keymap)
    #+end_src
*** elisp-demos
    #+begin_src emacs-lisp
    (require 'elisp-demos)
    (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update)
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-helpful)
    ;;; config-helpful.el ends here
    #+end_src
** which-key
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-which-key.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-which-key.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'which-key)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (require 'which-key)
    (which-key-mode)
    (which-key-setup-side-window-bottom)
    (setq whichkey-sort-order #'which-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10)
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-which-key)
    ;;; config-which-key.el ends here
    #+end_src
** ace-window
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-ace-window.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-ace-window.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'ace-window)
    #+end_src
*** variables
    #+begin_src emacs-lisp
    (customize-set-variable 'aw-scope 'frame)
    (customize-set-variable 'aw-dispatch-always nil)
    (customize-set-variable 'aw-minibuffer-flag t)
    (customize-set-variable 'aw-keys '(?q ?w ?e ?r ?t ?a ?s ?d ?f))
    (defvar aw-dispatch-alist
      '((?x aw-delete-window "Delete Window")
	(?m aw-swap-window "Swap Windows")
	(?M aw-move-window "Move Window")
	(?c aw-copy-window "Copy Window")
	(?j aw-switch-buffer-in-window "Select Buffer")
	(?n aw-flip-window)
	(?u aw-switch-buffer-other-window "Switch Buffer Other Window")
	(?c aw-split-window-fair "Split Fair Window")
	(?v aw-split-window-vert "Split Vert Window")
	(?b aw-split-window-horz "Split Horz Window")
	(?o delete-other-windows "Delete Other Windows")
	(?? aw-show-dispatch-help))
      "List of actions for `aw-dispatch-default'.")
    #+end_src
*** config
    #+begin_src emacs-lisp
    (require 'ace-window nil t)
    (set-face-attribute
     'aw-leading-char-face nil
     :foreground "deep sky blue"
     :weight 'bold
     :height 3.0)

    (set-face-attribute
     'aw-mode-line-face nil
     :inherit 'mode-line-buffer-id
     :foreground "lawn green")

    (ace-window-display-mode t)
    #+end_src
*** keybinding
    #+begin_src emacs-lisp
    (global-set-key [remap other-window] 'ace-window)
    #+end_src
**** general
     Since the =+config/leader-def= is defined only when =evil= is loaded, evaluate this after =evil=.
     #+begin_src emacs-lisp
     (with-eval-after-load 'config-general
       (progn
	 (require 'general)
	 (+config/leader-def
	   :states '(normal visual)
	   "w0" 'ace-delete-window
	   "wd" 'delete-window
	   "ww" 'ace-window)))
     #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-ace-window)
    ;;; config-ace-window.el ends here
    #+end_src
** perpective
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-perspective.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-perspective.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'perspective)
    #+end_src
*** variables
    #+begin_src emacs-lisp
    (setq persp-initial-frame-name "Main")
    (setq persp-state-default-file (expand-file-name "statesave" +emacs-data-dir))
    (customize-set-variable 'persp-mode-prefix-key (kbd "C-c b"))
    #+end_src
*** config
    #+begin_src emacs-lisp
    (unless (equal persp-mode t)
      (persp-mode))
    #+end_src
*** keybinding
    #+begin_src emacs-lisp
    (with-eval-after-load 'perspective
      (global-set-key [remap switch-to-buffer] #'persp-switch-to-buffer*)
      (define-key persp-mode-map (kbd "C-c b TAB") 'persp-switch-last))
    #+end_src
**** general
     #+begin_src emacs-lisp
     (with-eval-after-load 'config-general
       (progn
	 (require 'general)
	 (+config/leader-def
	   :states '(normal visual)
	   "TAB" (general-simulate-key "C-c b"
		   :name +perspective-prefix
		   :which-key "Perspective prefix"))))
     #+end_src
*** hooks
    #+begin_src emacs-lisp
    (unless (or (string= "exwm" (getenv "DESKTOP_SESSION"))
                (getenv "GUIX_LOCPATH"))
      (add-hook 'emacs-startup-hook (lambda () (persp-state-load persp-state-default-file)))
      (add-hook 'kill-emacs-hook #'persp-state-save))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-perspective)
    ;;; config-perspective.el ends here
    #+end_src
** centaur-tabs
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-centaur-tabs.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-centaur-tabs.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'centaur-tabs)
    #+end_src
*** hook
    #+begin_src emacs-lisp
    (add-hook 'dashboard-mode-hook #'centaur-tabs-local-mode)
    (add-hook 'term-mode-hook #'centaur-tabs-local-mode)
    (add-hook 'calendar-mode-hook #'centaur-tabs-local-mode)
    (add-hook 'org-agenda-mode-hook #'centaur-tabs-local-mode)
    (add-hook 'helpful-mode-hook #'centaur-tabs-local-mode)
    #+end_src
*** variables
    #+begin_src emacs-lisp
    (setq centaur-tabs-style "rounded"
	  centaur-tabs-set-icons t
	  centaur-tabs-set-bar 'under
	  x-underline-at-descent-line t
	  centaur-tabs-gray-out-icons 'buffer
	  centaur-tabs-close-button "✕"
	  centaur-tabs-set-modified-marker "•"
	  centaur-tabs-cycle-scope 'tabs)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (centaur-tabs-mode t)
    #+end_src
*** keybinding
    #+begin_src emacs-lisp
    (global-set-key (kbd "C-c t p") 'centaur-tabs-backward)
    (global-set-key (kbd "C-c t C-p") 'centaur-tabs-backward)
    (global-set-key (kbd "C-c t n") 'centaur-tabs-forward)
    (global-set-key (kbd "C-c t C-n") 'centaur-tabs-forward)
    (global-set-key (kbd "C-c t M-p") 'centaur-tabs-backward-group)
    (global-set-key (kbd "C-c t M-n") 'centaur-tabs-forward-group)
    (global-set-key (kbd "C-c t g") 'centaur-tabs-consult-switch-group)
    #+end_src
*** functions
    #+begin_src emacs-lisp
    ;; buffer groups
    (defun centaur-tabs-buffer-groups ()
      "`centaur-tabs-buffer-groups' control buffers' group rules.

       Group centaur-tabs with mode if buffer is derived from
      `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
       All buffer name start with * will group to \"Emacs\".
       Other buffer group by `centaur-tabs-get-group-name' with project name."
      (list
       (cond
	((memq major-mode '(telega-root-mode
			    telega-chat-mode
			    telega-image-mode
			    telega-webpage-mode
			    telega-edit-file-mode))
	 "Telega")
	((memq major-mode '(notmuch-show-mode
			    notmuch-tree-mode
			    notmuch-hello-mode
			    notmuch-search-mode
			    notmuch-message-mode))
	 "Notmuch")
	((memq major-mode '(erc-mode
			    erc-list-menu-mode
			    erc-track-minor-mode))
	 "ERC")
	((memq major-mode '(emms-mark-mode
			    emms-lyrics-mode
			    emms-browser-mode
			    emms-playlist-mode
			    emms-show-all-mode
			    emms-tag-editor-mode
			    emms-metaplaylist-mode
			    emms-volume-minor-mode
			    emms-browser-search-mode))
	 "Emms")
	((memq major-mode '(elfeed-show-mode
			    elfeed-search-mode))
	 "Elfeed")
	((memq major-mode '(vterm-mode
			    shell-mode
			    term-mode))
	 "Term")
	((or (string-equal "*" (substring (buffer-name) 0 1))
	     (memq major-mode '(magit-process-mode
				magit-status-mode
				magit-diff-mode
				magit-log-mode
				magit-file-mode
				magit-blob-mode
				magit-blame-mode
				)))
	 "Emacs")
	((derived-mode-p 'prog-mode)
	 "Editing")
	((derived-mode-p 'dired-mode)
	 "Dired")
	((memq major-mode '(helpful-mode
			    help-mode))
	 "Help")
	((memq major-mode '(org-mode
			    org-agenda-clockreport-mode
			    org-src-mode
			    org-agenda-mode
			    org-beamer-mode
			    org-indent-mode
			    org-bullets-mode
			    org-cdlatex-mode
			    org-agenda-log-mode
			    diary-mode))
	 "OrgMode")
	(t
	 (centaur-tabs-get-group-name (current-buffer))))))
    (setq centaur-tabs--buffer-show-groups t)
    #+end_src
*** consult integration
    #+begin_src emacs-lisp
    (defun centaur-tabs-consult-switch-group ()
      "Display a list of current buffer groups using Consult."
      (interactive)
      (when (featurep 'consult)
	(require 'consult)
	(centaur-tabs-switch-group
	 (consult--read
	  (centaur-tabs-get-groups)
	  :prompt "Centaur Tabs Groups:"))))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-centaur-tabs)
    ;;; config-centaur-tabs.el ends here
    #+end_src
** rainbow-mode
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-rainbow-mode.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-rainbow-mode.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'rainbow-mode)
    (require 'rainbow-mode)
    #+end_src
*** hook
    #+begin_src emacs-lisp
    (add-hook 'css-mode-hook #'rainbow-mode)
    #+end_src
*** function
    From [[https://emacs.stackexchange.com/questions/62336/do-not-colour-word-colours-in-rainbow-mode][emacs stackexchange]]:
    #+begin_src emacs-lisp
    ;; turn off word colors
    (defun +rainbow-turn-off-words ()
      "Turn off word colors in rainbow-mode."
      (interactive)
      (font-lock-remove-keywords
       nil
       `(,@rainbow-x-colors-font-lock-keywords
	 ,@rainbow-latex-rgb-colors-font-lock-keywords
	 ,@rainbow-r-colors-font-lock-keywords
	 ,@rainbow-html-colors-font-lock-keywords
	 ,@rainbow-html-rgb-colors-font-lock-keywords)))
    ;; turn off hexadecimal colors
    (defun +rainbow-turn-off-hexadecimal ()
      "Turn off hexadecimal colors in rainbow-mode."
      (interactive)
      (font-lock-remove-keywords
       nil
       `(,@rainbow-hexadecimal-colors-font-lock-keywords)))
    ;; TODO: set toggling and keybindings
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-rainbow-mode)
    ;;; config-rainbow-mode.el ends here
    #+end_src
** rainbow-delimiters
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-rainbow-delimiters.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-rainbow-delimiters.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'rainbow-delimiters)
    (require 'rainbow-delimiters)
    #+end_src
*** hook
    #+begin_src emacs-lisp
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'org-mode-hook 'rainbow-delimiters-mode)
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-rainbow-delimiters)
    ;;; config-rainbow-delimiters.el ends here
    #+end_src
** hl-todo
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-hl-todo.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-hl-todo.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'hl-todo)
    (require 'hl-todo)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (global-hl-todo-mode)
    ;;(add-hook 'prog-mode-hook hl-todo-mode-hook)
    ;;(add-hook 'yaml-mode-hook hl-todo-mode-hook)
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-hl-todo)
    ;;; config-hl-todo.el ends here
    #+end_src
** diminish
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-diminish.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-diminish.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'diminish)
    (require 'diminish)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (progn
      (with-eval-after-load 'rainbow-mode
	(diminish 'rainbow-mode))
      (diminish 'text-scale-mode)
      (with-eval-after-load 'eldoc
	(diminish 'eldoc-mode))
      (with-eval-after-load 'subword
	(diminish 'subword-mode))
      (with-eval-after-load 'flycheck
	(diminish 'flycheck-mode))
      (with-eval-after-load 'projectile
	(diminish 'projectile-mode))
      (with-eval-after-load 'yasnippet
	(diminish 'yas-global-mode)
	(diminish 'yas-extra-mode)
	(diminish 'yas-minor-mode))
      (with-eval-after-load 'which-key
	(diminish 'which-key-mode))
      (with-eval-after-load 'desktop-environment
	(diminish 'desktop-environment-mode))
      (with-eval-after-load 'paredit
	(diminish 'paredit-mode))
      (with-eval-after-load 'theme-magic
	(diminish 'theme-magic-export-theme-mode))
      (with-eval-after-load 'git-gutter
	(diminish 'git-gutter-mode))
      (with-eval-after-load 'smartparens
	(diminish 'smartparens-mode))
      (with-eval-after-load 'evil-collection-unimpaired
	(diminish 'evil-collection-unimpaired-mode)))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-diminish)
    ;;; config-diminish.el ends here
    #+end_src
** dashboard
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-dashboard.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-dashboard.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'dashboard)
    (require 'dashboard)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (dashboard-setup-startup-hook)
    #+end_src
*** variables
    #+begin_src emacs-lisp
    ;;(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents  . 5)
			    (bookmarks . 5)
			    (projects . 5)
			    (agenda . 5)
			    (registers . 5)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-navigator t)
    (setq dashboard-set-init-info t)
    (setq dashboard-week-agenda t)
    (setq dashboard-items-default-length 40)
    (if (featurep 'projectile)
	(setq dashboard-projects-backend 'projectile)
      (setq dashboard-projects-backend 'project-el))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-dashboard)
    ;;; config-dashboard.el ends here
    #+end_src
** alert
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-alert.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-alert.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'alert)
    #+end_src
*** variable
    #+begin_src emacs-lisp
    (customize-set-variable 'alert-default-style #'notifications)
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-alert)
    ;;; config-alert.el ends here
    #+end_src
** smartparens
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-smartparens.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-smartparens.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'smartparens)
    #+end_src
*** config
    #+begin_src emacs-lisp
    ;; disable `electric-pair-mode'
    ;; (electric-pair-mode 0)
    (smartparens-global-mode 1)
    (require 'smartparens-config)
    (setq sp-highlight-pair-overlay nil
	  sp-highlight-wrap-overlay nil
	  sp-highlight-wrap-tag-overlay nil)
    ;; Silence some harmless but annoying echo-area spam
    (dolist (key '(:unmatched-expression :no-matching-tag))
      (setf (alist-get key sp-message-alist) nil))
    (sp-local-pair '(minibuffer-mode minibuffer-inactive-mode) "'" nil :actions nil)
    (sp-local-pair '(minibuffer-mode minibuffer-inactive-mode) "`" nil :actions nil)
    (sp-local-pair '(emacs-lisp-mode lisp-mode scheme-mode) "'" nil :actions nil)
    (add-hook 'minibuffer-setup-hook 'turn-on-smartparens-strict-mode)
    (add-to-list 'sp-lisp-modes 'sly-mrepl-mode)

    (with-eval-after-load 'evil
      ;; But if someone does want overlays enabled, evil users will be stricken
      ;; with an off-by-one issue where smartparens assumes you're outside the
      ;; pair when you're really at the last character in insert mode. We must
      ;; correct this vile injustice.
      (setq sp-show-pair-from-inside t)
      ;; ...and stay highlighted until we've truly escaped the pair!
      (setq sp-cancel-autoskip-on-backward-movement nil)
      ;; Smartparens conditional binds a key to C-g when sp overlays are active
      ;; (even if they're invisible). This disruptively changes the behavior of
      ;; C-g in insert mode, requiring two presses of the key to exit insert mode.
      ;; I don't see the point of this keybind, so...
      (setq sp-pair-overlay-keymap (make-sparse-keymap)))

    ;; The default is 100, because smartparen's scans are relatively expensive
    ;; (especially with large pair lists for some modes), we reduce it, as a
    ;; better compromise between performance and accuracy.
    (setq sp-max-prefix-length 25)
    ;; No pair has any business being longer than 4 characters; if they must, set
    ;; it buffer-locally. It's less work for smartparens.
    (setq sp-max-pair-length 4)
    #+end_src
*** custom org-mode-hook
    #+begin_src emacs-lisp
    (defun +config/sp-mode-org-hook ()
      (when (org-in-src-block-p)
	(sp-local-pair 'org-mode "'" nil :actions nil)))
    (add-hook 'org-mode-hook '+config/sp-mode-org-hook)
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-smartparens)
    ;;; config-smartparens.el ends here
    #+end_src
** treemacs
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-treemacs.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-treemacs.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'treemacs)
    (straight-use-package 'treemacs-projectile)
    (straight-use-package 'treemacs-magit)
    (straight-use-package 'treemacs-icons-dired)
    (straight-use-package 'treemacs-perspective)
    (straight-use-package 'treemacs-all-the-icons)
    (straight-use-package 'project)
    #+end_src
*** Variables
    #+begin_src emacs-lisp
    (customize-set-variable 'treemacs-persist-file (expand-file-name ".treemacs-persist" +emacs-data-dir))
    #+end_src
*** Functions
    #+begin_src emacs-lisp :tangle no
    (require 'ace-window)
    (defun +config/treemacs-back-and-forth ()
      (interactive)
      (if (treemacs-is-treemacs-window-selected?)
	  (ace-flip-window)
	(treemacs-select-window)))
    #+end_src
*** Keybinding
    To switch from a normal window to a /treemacs/ window add ~C-u~ before the keybinding (~C-u C-x o~).
    #+begin_src emacs-lisp
    (global-set-key (kbd "C-x M-SPC") 'treemacs)
    #+end_src
**** general
     #+begin_src emacs-lisp
     (with-eval-after-load 'config-general
       (progn
	 (require 'general)
	 (+config/leader-def
	   :states '(normal visual)
	   "t" '(:ignore t :which-key "Terminal/Treemacs prefix")
	   "t SPC" 'treemacs)))
     #+end_src
*** Misc
    #+begin_src emacs-lisp
    ;; projectile
    (with-eval-after-load 'projectile
      (require 'treemacs-projectile))
    ;; dired
    (add-hook 'dired-mode-hook #'treemacs-icons-dired-enable-once)
    ;; magit
    (with-eval-after-load 'magit
      (require 'treemacs-magit))
    ;; perspective
    (with-eval-after-load 'perspective
      (progn
	(require 'treemacs-perspective)
	(treemacs-set-scope-type 'Perspectives)))
    ;; theme
    (with-eval-after-load 'treemacs
      (progn
	(treemacs-load-theme 'doom-atom)
	(treemacs-indent-guide-mode 1)))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-treemacs)
    ;;; config-treemacs.el ends here
    #+end_src
** vertico-posframe
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-vertico-posframe.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-vertico-posframe.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (with-eval-after-load 'vertico
      (straight-use-package 'vertico-posframe))
    #+end_src
*** config
    #+begin_src emacs-lisp
    (with-eval-after-load 'vertico
      (require 'vertico-posframe)
      (vertico-posframe-mode 1))
    (when (featurep 'corfu)
      (setq corfu-preview-current nil
	    corfu-echo-documentation nil))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-vertico-posframe)
    ;;; config-vertico-posframe.el ends here
    #+end_src
* Editor
** builtin editor
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/builtin-editor.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-builtin-editor.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** variables
    #+begin_src emacs-lisp
    ;; Governs the behavior of ~TAB~ completion on the first press of the key.
    (setq tab-first-completion 'complete)
    #+end_src
*** disable auto pairing for =<  >=
    #+begin_src emacs-lisp
    (electric-pair-mode 1)
    (add-function :before-until electric-pair-inhibit-predicate
		  (lambda (c) (eq c ?<   ;; >
				  )))
    #+end_src
*** don't treat angled brackets as parentheses
    from https://emacs.stackexchange.com/questions/50216/org-mode-code-block-parentheses-mismatch
    #+begin_src emacs-lisp
    (defun org-syntax-table-modify ()
      "Modify `org-mode-syntax-table' for the current org buffer."
      (modify-syntax-entry ?< "." org-mode-syntax-table)
      (modify-syntax-entry ?> "." org-mode-syntax-table))

    (add-hook 'org-mode-hook #'org-syntax-table-modify)
    #+end_src
*** Use spaces instead of tabs
    #+begin_src emacs-lisp
      (setq-default indent-tabs-mode nil
                    tab-width 2
                    tab-always-indent nil)
      (setq tabify-regexp "^\t* [ \t]+")
    #+end_src
*** Use "y" and "n" to confirm/negate prompt instead of "yes" and "no".
    #+begin_src emacs-lisp
      (advice-add #'yes-or-no-p :override #'y-or-n-p)
      (setq y-or-n-p-use-read-key t)
    #+end_src
*** Keep the cursor out of the read-only portions of the minibuffer
    #+begin_src emacs-lisp
      (setq minibuffer-prompt-properties '(read-only t intangible t cursor-intangible t face minibuffer-prompt))
      (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
    #+end_src
*** Don't save duplicates in =kill-ring=
    #+begin_src emacs-lisp
      (customize-set-variable 'kill-do-not-save-duplicates t)
    #+end_src
*** Better support for files with long lines.
    #+begin_src emacs-lisp
      (setq-default bidi-paragraph-direction 'left-to-right)
      (setq-default bidi-inhibit-bpa t)
      (global-so-long-mode 1)
    #+end_src
*** Make shebang (#!) file executable when saved.
    #+begin_src emacs-lisp
      (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
    #+end_src
*** Remove text in active region if inserting text.
    #+begin_src emacs-lisp
      (delete-selection-mode 1)
    #+end_src
*** Mouse middle-click yanks where the point is, not where the mouse is.
    #+begin_src emacs-lisp
      (setq mouse-yank-at-point t)
    #+end_src
*** Delete trailing whitespace on save.
    #+begin_src emacs-lisp
      (add-hook 'before-save-hook 'delete-trailing-whitespace)
    #+end_src
*** Enable whitespace-mode
    #+begin_src emacs-lisp
      (unless (or (eq major-mode 'fundamental-mode)
                  (bound-and-true-p global-whitespace-mode)
                  (null buffer-file-name))
        (require 'whitespace)
        (setq whitespace-line-column nil
              whitespace-style
              '(face indentation tabs tab-mark spaces space-mark newline newline-mark
                     trailing lines-tail)
              whitespace-display-mappings
              '((tab-mark ?\t [?› ?\t])
                (newline-mark ?\n [?¬ ?\n])
                (space-mark ?\  [?·] [?.]))))
    #+end_src
*** Easily navigate sillycased words.
    #+begin_src emacs-lisp
      (global-subword-mode 1)
    #+end_src

*** Revert buffers when the underlying file has changed
    #+begin_src emacs-lisp
      (global-auto-revert-mode 1)
    #+end_src
*** footer
    #+begin_src emacs-lisp
    (provide 'builtin-editor)
    ;;; builtin-editor.el ends here
    #+end_src
** multiple-cursors
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-multiple-cursors.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-multiple-cursors.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'multiple-cursors)
    #+end_src
*** variable
    #+begin_src emacs-lisp
    (setq mc/list-file (expand-file-name ".mc-lists.el" +emacs-data-dir))
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C-c M->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-c M-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c M-a") 'mc/mark-all-like-this)
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-multiple-cursors)
    ;;; config-multiple-cursors.el ends here
    #+end_src
** yasnippet
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-yasnippet.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-yasnippet.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'yasnippet)
    (straight-use-package 'yasnippet-snippets)
    #+end_src
*** variable
    #+begin_src emacs-lisp
    (setq yas-snippet-dir `(,(expand-file-name "yasnippet/snippets/" +emacs-data-dir)))
    (eval-after-load 'yasnippet
      (make-directory (expand-file-name "yasnippet/snippets/" +emacs-data-dir) :parents))
    (yas-global-mode 1)
    #+end_src
*** keybinding
    #+begin_src emacs-lisp
    (global-set-key (kbd "C-c y i") 'yas-insert-snippet)
    (global-set-key (kbd "C-c y d") 'yas-describe-tables)
    #+end_src
*** consult integration
    #+begin_src emacs-lisp
    (when (featurep 'consult)
      (straight-use-package 'consult-yasnippet))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-yasnippet)
    ;;; config-yasnippet.el ends here
    #+end_src
** geiser
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-geiser.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-geiser.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'geiser)
    (straight-use-package 'geiser-guile)
    (straight-use-package 'geiser-racket)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (eval-after-load 'geiser
      `(make-directory ,(expand-file-name "geiser/" +emacs-data-dir) t))
    (setq geiser-repl-history-filename     (expand-file-name "geiser/repl-history" +emacs-data-dir))
    (require 'geiser-impl)
    (add-to-list 'geiser-implementations-alist '((regexp "\\.scm$") guile))
    (setq geiser-scheme-implementation "guile"
	  geiser-default-implementation "guile")
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-geiser)
    ;;; config-geiser.el ends here
    #+end_src
** yaml-mode
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-yaml-mode.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-yaml-mode.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'yaml-mode)
    (require 'yaml-mode)
    #+end_src
*** hook
    #+begin_src emacs-lisp
    (add-to-list 'auto-mode-alist '("'\\.yaml\\'" . yaml-mode))
    (add-to-list 'auto-mode-alist '("'\\.yml\\'" . yaml-mode))
    (add-hook 'yaml-mode-hook
	      #'(lambda ()
		  (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-yaml-mode)
    ;;; config-yaml-mode.el ends here
    #+end_src
** toml-mode
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-toml-mode.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-toml-mode.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'toml-mode)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (add-to-list 'auto-mode-alist '("'\\.toml\\'" . toml-mode))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-toml-mode)
    ;;; config-toml-mode.el ends here
    #+end_src
** nix-mode
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-nix-mode.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-nix-mode.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'nix-mode)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-nix-mode)
    ;;; config-nix-mode.el ends here
    #+end_src
** toml-mode
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-toml-mode.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-toml-mode.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'toml-mode)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (add-to-list 'auto-mode-alist '("'\\.toml\\'" . toml-mode))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-toml-mode)
    ;;; config-toml-mode.el ends here
    #+end_src
** nginx-mode
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-nginx-mode.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-nginx-mode.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'nginx-mode)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (require 'nginx-mode)
    (add-to-list 'auto-mode-alist '("/nginx/sites-\\(?:available\\|enabled\\)/" . nginx-mode))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-nginx-mode)
    ;;; config-nginx-mode.el ends here
    #+end_src
** markdown-mode
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-markdown-mode.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-markdown-mode.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'markdown-mode)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (autoload 'markdown-mode "markdown-mode"
      "Major mode for editing Markdown files" t)
    (add-to-list 'auto-mode-alist
		 '("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode))

    (autoload 'gfm-mode "markdown-mode"
      "Major mode for editing GitHub Flavored Markdown files" t)
    (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-markdown-mode)
    ;;; config-markdown-mode.el ends here
    #+end_src
** visual-regexp
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-visual-regexp.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-visual-regexp.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'visual-regexp)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (require 'visual-regexp)
    #+end_src
*** keybinding
    #+begin_src emacs-lisp
    (define-key global-map (kbd "C-c R") 'vr/replace)
    (define-key global-map (kbd "C-c q") 'vr/query-replace)
    ;; if you use multiple-cursors, this is for you:
    #+end_src
*** multiple-cursors integration
    #+begin_src emacs-lisp
    (when (featurep 'config-multiple-cursors)
      (define-key global-map (kbd "C-c M-m") 'vr/mc-mark))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-visual-regexp)
    ;;; config-visual-regexp.el ends here
    #+end_src
** undo-fu
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-undo-fu.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-undo-fu.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'undo-fu)
    (straight-use-package 'undo-fu-session)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (require 'undo-fu)
    (setq undo-limit 400000
	  undo-strong-limit 3000000
	  undo-outer-limit 48000000)
    (setq undo-fu-session-directory (expand-file-name "undo-fu-session/" +emacs-data-dir))
    #+end_src
*** keybinding
    #+begin_src emacs-lisp
    (global-unset-key (kbd "C-z")) ; previously `suspend-frame'
    (unless (featurep' evil)
      (global-set-key (kbd "C-z") 'undo-fu-only-undo)
      (global-set-key (kbd "C-S-z") 'undo-fu-only-redo))
    (setq undo-fu-session-incompatible-files '("\\.gpg$" "/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))
    (global-undo-fu-session-mode)
    #+end_src
*** evil integration
    #+begin_src emacs-lisp
    (with-eval-after-load 'evil
      (customize-set-variable 'evil-undo-system 'undo-fu))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-undo-fu)
    ;;; config-undo-fu.el ends here
    #+end_src
** block-nav
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-block-nav.el" user-emacs-directory)
   :END:
   #+begin_src emacs-lisp
   ;;; config-block-nav.el --- Summary -*- lexical-binding: t -*-
   ;;; Commentary:
   ;; This file is auto-generated from `config.org'
   ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
   ;;; Code:
   #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'block-nav)
    #+end_src
*** variables
    #+begin_src emacs-lisp
    (setf block-nav-move-skip-shallower t
	  block-nav-center-after-scroll t)
    #+end_src
*** keybindings
**** hydra
     #+begin_src emacs-lisp
     (when (featurep 'hydra)
       (defhydra hydra-block-nav (global-map "C-c b"
					     :pre (linum-mode 1)
					     :post (linum-mode -1))
	 "block-nav"
	 ("M-p" block-nav-previous-indentation-level "previous indent")
	 ("M-n" block-nav-next-indentation-level "next indent")
	 ("p" block-nav-previous-block "previous block")
	 ("n" block-nav-next-block "next block")))
     #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-block-nav)
    ;;; config-block-nav.el ends here
    #+end_src
** rust-mode
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-rust-mode.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-rust-mode.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'rust-mode)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (require 'rust-mode)
    (add-hook 'rust-mode-hook
	      (lambda () (prettify-symbols-mode)))
    (add-hook 'rust-mode-hook
	      (lambda () (setq indent-tabs-mode nil)))
    (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-rust-mode)
    ;;; config-rust-mode.el ends here
    #+end_src
** ansible
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-ansible.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-ansible.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'ansible)
    (straight-use-package 'ansible-doc)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (require 'ansible)
    (add-hook 'yaml-mode-hook #'(lambda () (ansible 1)))
    (add-hook 'ansible-hook 'ansible-auto-decrypt-encrypt)
    (setq ansible-section-face 'font-lock-variable-name-face
	  ansible-task-label-face 'font-lock-doc-face)
    ;; set keybinding in yaml-mode since I usually set secrets in variable file
    (define-key yaml-mode-map (kbd "C-c a d") 'ansible-decrypt-buffer)
    (define-key yaml-mode-map (kbd "C-c a e") 'ansible-encrypt-buffer)
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-ansible)
    ;;; config-ansible.el ends here
    #+end_src
** jinja2-mode
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-jinja2-mode.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-jinja2-mode.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'jinja2-mode)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (setq jinja2-enable-indent-on-save nil)
    (add-to-list 'auto-mode-alist '("'\\.j2$\\'" . jinja2-mode))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-jinja2-mode)
    ;;; config-jinja2-mode.el ends here
    #+end_src
** hydra
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-hydra.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-hydra.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'hydra)
    (require 'hydra)
    #+end_src
*** hydra remapping
**** yank
     #+begin_src emacs-lisp
     (cond ((featurep 'consult)
	    (defhydra hydra-yank-pop ()
	      "yank"
	      ("C-y" yank nil)
	      ("M-y" yank-pop nil)
	      ("y" (yank-pop 1) "next")
	      ("Y" (yank-pop -1) "prev")
	      ("l" consult-yank-from-kill-ring "list" :color blue)))
	   ((featurep 'helm)
	    (defhydra hydra-yank-pop ()
	      "yank"
	      ("C-y" yank nil)
	      ("M-y" yank-pop nil)
	      ("y" (yank-pop 1) "next")
	      ("Y" (yank-pop -1) "prev")
	      ("l" helm-show-kill-ring "list" :color blue)))
	   (t
	    (defhydra hydra-yank-pop ()
	      "yank"
	      ("C-y" yank nil)
	      ("M-y" yank-pop nil)
	      ("y" (yank-pop 1) "next")
	      ("Y" (yank-pop -1) "prev"))))
     (global-set-key [remap yank-pop] #'hydra-yank-pop/yank-pop)
     (global-set-key [remap yank] #'hydra-yank-pop/yank)
     #+end_src
**** TODO movement
     :LOGBOOK:
     - Note taken on [2022-06-08 Wed 02:22] \\
       Find a way to avoid conflict
     - State "TODO"       from              [2022-06-08 Wed 02:22]
     :END:
     This conflict with minibuffer
     #+begin_src emacs-lisp :tangle no
     (global-set-key
      (kbd "C-n")
      (defhydra hydra-move
	(:body-pre (next-line))
	"move"
	("n" next-line)
	("p" previous-line)
	("f" forward-char)
	("b" backward-char)
	("a" beginning-of-line)
	("e" move-end-of-line)
	("v" scroll-up-command)
	;; Converting M-v to V here by analogy.
	("V" scroll-down-command)
	("l" recenter-top-bottom)))
     #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-hydra)
    ;;; config-hydra.el ends here
    #+end_src
** general
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-general.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-general.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'general)
    (require 'general)
    (require 'which-key)
    (when (featurep 'config-projectile)
      (require 'projectile))
    #+end_src
*** variables
    #+begin_src emacs-lisp
    (defconst +general-leader "SPC")
    (defconst +general-local-leader "C-c SPC")
    #+end_src
    For frequently used prefix keys, the user can create a custom definer with a default =:prefix=, using a variable is not necessary, but it may be useful if you want to
    experiment with different prefix keys and aren't using =general-create-definer=.
    #+begin_example
    #+begin_src emacs-lisp
      (general-create-definer +config/leader-def
	;; :prefix my-leader
	;; or without a variable
	:prefix "C-c")
    #+end_src
    #+end_example
    Then we can use =+config/leader-def= in
    - Global keybinding
      #+begin_example
      #+begin_src emacs-lisp
	(+config/leader-def
	 "a" 'org-agenda
	 "b" 'counsel-bookmark
	 "c" 'org-capture)
      #+end_src
      #+end_example
    - Local keybinding
      #+begin_example
      #+begin_src emacs-lisp
	(+config/leader-def
	 :keymaps 'clojure-mode-map
	 ;; bind "C-c C-l"
	 "C-l" 'cider-load-file
	 "C-z" 'cider-switch-to-repl-buffer)
	;; `general-create-definer' creates wrappers around `general-def', so
	;; `define-key'-like syntax is also supported
	(+config/leader-def clojure-mode-map
		       "C-l" 'cider-load-file
		       "C-z" 'cider-switch-to-repl-buffer)
      #+end_src
      #+end_example
*** general definer
    #+begin_src emacs-lisp
    (require 'general)
    (when (not (featurep 'evil))
      (general-evil-setup t))
    (general-create-definer +config/leader-def
      :prefix +general-leader)
    (when (featurep 'evil)
      (general-create-definer +config/local-leader-def
	:prefix +general-local-leader
	:non-normal-prefix +general-local-leader))
    #+end_src
*** Set title for which-key
    #+begin_src emacs-lisp
    (+config/leader-def
      :states '(normal visual)
      "" '(nil :which-key "+config/leader-def root")
      "SPC" 'execute-extended-command
      ":" 'eval-expression
      "a" '(:ignore t :which-key "Application Prefix")
      "b" '(:ignore t :which-key "Buffers Prefix")
      "f" '(:ignore t :which-key "Files Prefix")
      "F" '(:ignore t :which-key "Frames Prefix")
      "g" '(:ignore t :which-key ("G-key" . "Git Prefix"))
      "m" '(:ignore t :which-key "Mail Prefix")
      "o" '(:ignore t :which-key "Org-mode Prefix")
      "s" '(:ignore t :which-key "Search Prefix")
      "t" '(:ignore t :which-key "Terminal Prefix")
      "w" '(:ignore t :which-key "Window Prefix")
      "/" '(:ignore t :which-key "Navigation Prefix"))
    #+end_src
*** keybindings
**** help
     #+begin_src emacs-lisp
     (general-define-key
      :states '(normal visual)
      :prefix +general-leader
      "h" (general-simulate-key "C-h"
	    :name +general-simulates-C-h
	    :docstring "Simulate C-h in normal and visual state with SPC-h."
	    :which-key "Simulate C-h"))
     #+end_src
**** files
     #+begin_src emacs-lisp
     (+config/leader-def
       :states '(normal visual)
       "ff" 'find-file
       "fw" 'write-file)
     #+end_src
**** buffers
     #+begin_src emacs-lisp
     (+config/leader-def
       :states '(normal visual)
       "bb" 'switch-to-buffer
       "br" 'rename-buffer
       "bd" 'kill-current-buffer
       "bi" 'ibuffer
       "bk" 'kill-buffer
       "br" 'revert-buffer
       "bs" 'save-buffer
       "bS" 'save-some-buffers
       "b[" 'previous-buffer
       "b]" 'next-buffer)
     #+end_src
**** window
***** builtin functions.
      #+begin_src emacs-lisp
      (+config/leader-def
	:states '(normal visual)
	"w1" 'delete-other-windows
	"wo" 'delete-other-windows
	"w=" 'balance-windows
	"w+" 'maximize-window
	"w-" 'minimize-window)

      (general-define-key
       :keymaps '(normal visual)
       :prefix +general-leader
       "w^" '(enlarge-window :properties (:repeat t))
       "w{" '(shrink-window-horizontally :properties (:repeat t))
       "w}" '(enlarge-window-horizontally :properties (:repeat t)))
      #+end_src
***** only bind this when evil not loaded
      #+begin_src emacs-lisp
      (unless (featurep 'evil)
	(+config/leader-def
	  :states '(normal visual)
	  "ws" 'split-window-right
	  "wv" 'split-window-below))
      #+end_src
***** search
****** builtin
       #+begin_src emacs-lisp
       (+config/leader-def
	 :states '(normal visual)
	 "sg" 'grep-find
	 "si" 'imenu)
       #+end_src
***** frames
      #+begin_src emacs-lisp
      (+config/leader-def
	:states '(normal visual)
	"Fd" 'delete-frame
	"Ff" 'make-frame
	"fo" 'other-frame)
      #+end_src
***** navigation
****** builtin
******* registers
	#+begin_src emacs-lisp
	(+config/leader-def
	  :states '(normal visual)
	  "/r" '(:ignore t :which-key "Register prefix")
	  "/r SPC" 'point-to-register
	  "/r +" 'increment-register
	  "/r f" 'frameset-to-register
	  "/r n" 'number-to-register
	  "/r i" 'insert-register
	  "/r s" 'copy-to-register
	  "/r j" 'jump-to-register)
	#+end_src
******* bookmark
	#+begin_src emacs-lisp
	(+config/leader-def
	  :states '(normal visual)
	  "/b" '(:ignore t :which-key "Bookmark prefix")
	  "/bb" 'bookmark-jump
	  "/bm" 'bookmark-set)
	#+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-general)
    ;;; config-general.el ends here
    #+end_src
** evil
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-evil.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-evil.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'evil)
    (straight-use-package 'evil-collection)
    (straight-use-package 'evil-easymotion)
    (straight-use-package 'evil-embrace)
    (straight-use-package 'evil-escape)
    (straight-use-package 'evil-org)
    #+end_src
*** variables
    This is what I've grown accustomed in /Emacs/.
    #+begin_src emacs-lisp
    (customize-set-variable 'evil-move-beyond-eol t)
    (customize-set-variable 'evil-split-window-below t)
    (customize-set-variable 'evil-vsplit-window-right t)
    (customize-set-variable 'evil-start-of-line t)
    (customize-set-variable 'evil-want-keybinding nil)
    (customize-set-variable 'evil-want-integration t)
    (customize-set-variable 'evil-want-c-i-jump nil)
    (customize-set-variable 'evil-ex-search-vim-style-regexp t)
    (customize-set-variable 'evil-ex-visual-char-range t)
    (customize-set-variable 'evil-symbol-word-search t)
    (customize-set-variable 'evil-ex-interactive-search-highlight 'selected-window)
    (customize-set-variable 'evil-kbd-macro-suppress-motion-error t)
    (customize-set-variable 'evil-want-Y-yank-to-eol t)
    (customize-set-variable 'evil-want-C-g-bindings t)
    (customize-set-variable 'evil-respect-visual-line-mode nil)
    (customize-set-variable 'evil-want-abbrev-expand-on-insert-exit nil)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (setq evil-ex-search-vim-style-regexp t
	  evil-ex-visual-char-range t  ; column range for ex commands
	  evil-mode-line-format 'nil
	  ;; more vim-like behavior
	  evil-symbol-word-search t
	  ;; Only do highlighting in selected window so that Emacs has less work
	  ;; to do highlighting them all.
	  evil-ex-interactive-search-highlight 'selected-window
	  ;; It's infuriating that innocuous "beginning of line" or "end of line"
	  ;; errors will abort macros, so suppress them:
	  evil-kbd-macro-suppress-motion-error t)
    #+end_src
*** hooks
    #+begin_src emacs-lisp
    (add-hook 'with-editor-mode-hook 'evil-insert-state)
    #+end_src
*** dependencies
    #+begin_src emacs-lisp
    (require 'config-undo-fu)
    (require 'evil)
    (evil-mode 1)
    (when (require 'evil-collection nil t)
      (evil-collection-init))
    #+end_src
*** eldoc integration
    #+begin_src emacs-lisp
    (with-eval-after-load 'eldoc
      (eldoc-add-command 'evil-normal-state
			 'evil-insert
			 'evil-change
			 'evil-delete
			 'evil-replace))
    #+end_src
*** evil-easymotion
    This uses "SPC" for its keybindings, so make sure it doesnt collide with others.
    #+begin_src emacs-lisp
    (require 'evil-easymotion)
    (evilem-default-keybindings "SPC")
    (evilem-create 'evilem-default-keybindings)
    #+end_src
**** from doomemacs
     Use evil-search backend, instead of isearch.
     #+begin_src emacs-lisp
     (evilem-make-motion evilem-motion-search-next #'evil-ex-search-next
			 :bind ((evil-ex-search-highlight-all nil)))
     (evilem-make-motion evilem-motion-search-previous #'evil-ex-search-previous
			 :bind ((evil-ex-search-highlight-all nil)))
     (evilem-make-motion evilem-motion-search-word-forward #'evil-ex-search-word-forward
			 :bind ((evil-ex-search-highlight-all nil)))
     (evilem-make-motion evilem-motion-search-word-backward #'evil-ex-search-word-backward
			 :bind ((evil-ex-search-highlight-all nil)))
     #+end_src
     Rebind scope of w/W/e/E/ge/gE evil-easymotion motions to the visible buffer, rather than just the current line.
     #+begin_src emacs-lisp
     (put 'visible 'bounds-of-thing-at-point (lambda () (cons (window-start) (window-end))))
     (evilem-make-motion evilem-motion-forward-word-begin #'evil-forward-word-begin :scope 'visible)
     (evilem-make-motion evilem-motion-forward-WORD-begin #'evil-forward-WORD-begin :scope 'visible)
     (evilem-make-motion evilem-motion-forward-word-end #'evil-forward-word-end :scope 'visible)
     (evilem-make-motion evilem-motion-forward-WORD-end #'evil-forward-WORD-end :scope 'visible)
     (evilem-make-motion evilem-motion-backward-word-begin #'evil-backward-word-begin :scope 'visible)
     (evilem-make-motion evilem-motion-backward-WORD-begin #'evil-backward-WORD-begin :scope 'visible)
     (evilem-make-motion evilem-motion-backward-word-end #'evil-backward-word-end :scope 'visible)
     (evilem-make-motion evilem-motion-backward-WORD-end #'evil-backward-WORD-end :scope 'visible)
     #+end_src
*** evil-embrace
**** variables
     #+begin_src emacs-lisp
     (customize-set-variable 'evil-embrace-show-help-p nil)
     #+end_src
**** hooks
     #+begin_src emacs-lisp
     (add-hook 'LaTex-mode-hook #'embrace-LaTex-mode-hook)
     (add-hook 'org-mode-hook #'embrace-org-mode-hook)
     (add-hook 'ruby-mode-hook #'embrace-ruby-mode-hook)
     (add-hook 'emacs-lisp-mode-hook #'embrace-emacs-lisp-mode-hook)
     #+end_src
**** enable evil-embrace
     #+begin_src emacs-lisp
     (require 'evil-embrace)
     (with-eval-after-load 'evil-surround
       (evil-embrace-enable-evil-surround-integration))
     #+end_src
*** evil-surround
**** config
     #+begin_src emacs-lisp
     (global-evil-surround-mode 1)
     #+end_src
*** evil-escape
**** variables
     #+begin_src emacs-lisp
     (customize-set-variable 'evil-escape-excluded-states '(normal visual multiedit emacs motion))
     (customize-set-variable 'evil-escape-excluded-major-modes '(treemacs-mode vterm-mode))
     (customize-set-variable 'evil-escape-key-sequence "jk")
     (customize-set-variable 'evil-escape-delay 0.15)
     #+end_src
**** define evil key
     #+begin_src emacs-lisp
     (evil-define-key* '(insert replace visual operator) 'global "\C-g" #'evil-escape)
     #+end_src
**** enable evil-escape
     #+begin_src emacs-lisp
     (require 'evil-escape)
     #+end_src
*** evil-org
    #+begin_src emacs-lisp
    (require 'evil-org)
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'org-capture-mode-hook #'evil-insert-state)

    (evil-org-set-key-theme)
    (setq evil-org-retain-visual-state-on-shift t
	  evil-org-special-o/O '(table-row)
	  evil-org-use-additional-insert t)

    (add-hook 'evil-org-mode-hook #'evil-normalize-keymaps)

    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)
    #+end_src
*** keybinding
**** general
***** window
      #+begin_src emacs-lisp
      (with-eval-after-load 'general
	(+config/leader-def
	  :states '(normal visual)
	  "wW" 'evil-window-prev ; C-w W
	  "wh" 'evil-window-left ; C-w h
	  "wH" 'evil-window-top-left ; C-w C-t
	  "wl" 'evil-window-right ; C-w l
	  "wL" 'evil-window-bottom-right ; C-w C-b
	  "wj" 'evil-window-down ; C-w j
	  "wk" 'evil-window-up ; C-w k
	  "wR" 'evil-window-rotate-upwards ; C-w R
	  "wr" 'evil-window-rotate-downwards ; C-w r
	  "ws" 'evil-window-split ; C-w r
	  "wv" 'evil-window-vsplit ; C-w r
	  "wv" 'evil-window-vsplit ; C-w r
	  ))
      #+end_src
***** buffer
      #+begin_src emacs-lisp
      (with-eval-after-load 'general
	(+config/leader-def
	  :states '(normal visual)
	  "bo" 'evil-buffer))
      #+end_src
***** avoid conflict with ace-window
      #+begin_src emacs-lisp
      (unless (featurep 'ace-window)
	(+config/leader-def
	  :states '(normal visual)
	  "w0" 'evil-window-delete ; C-w C-c
	  "wd" 'evil-window-delete ; C-w C-c
	  "ww" 'evil-window-next ; C-w C-w
	  ))
      #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-evil)
    ;;; config-evil.el ends here
    #+end_src
** aggressive-indent-mode
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-aggressive-indent-mode.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-aggressive-indent-mode.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'aggressive-indent)
    (require 'aggressive-indent)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (global-aggressive-indent-mode 1)
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-aggressive-indent-mode)
    ;;; config-aggressive-indent-mode.el ends here
    #+end_src
* Org
** base org configuration
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/builtin-org.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-builtin-org.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** org-contrib
    #+begin_src emacs-lisp
    (straight-use-package 'org-contrib)
    #+end_src
*** general variables
    #+begin_src emacs-lisp
    (customize-set-variable 'org-list-allow-alphabetical t)
    ;; Make most of the default modules opt-in to lighten its first-time load
    ;; delay. I sincerely doubt most users use them all.
    (defvar org-modules
      '(;; ol-w3m
	;; ol-bbdb
	ol-bibtex
	;; ol-docview
	;; ol-gnus
	;; ol-info
	;; ol-irc
	;; ol-mhe
	;; ol-rmail
	;; ol-eww
	))
    ;; Save target buffer after archiving a node.
    (setq org-archive-subtree-save-file-p t)
    ;; Don't number headings with these tags
    (setq org-num-face '(:inherit org-special-keyword :underline nil :weight bold)
	  org-num-skip-tags '("noexport" "nonum"))
    ;; Prevent modifications made in invisible sections of an org document, as
    ;; unintended changes can easily go unseen otherwise.
    (setq org-catch-invisible-edits 'smart)
    ;; Global ID state means we can have ID links anywhere. This is required for
    ;; `org-brain', however.
    (setq org-id-locations-file-relative t)

    (setq org-show-notification-handler "notify-send")

    (setq org-src-preserve-indentation nil
	  org-edit-src-content-indentation 0)

    ;; Set org-properties to also apply to their sublevels.
    (setq org-use-property-inheritance t)

    (setq org-adapt-indentation t)
    (org-indent-mode 1)
    #+end_src
*** files
    #+begin_src emacs-lisp
    (unless (file-directory-p (expand-file-name "org" +emacs-data-dir))
      (make-directory (expand-file-name "org" +emacs-data-dir) :parents))
    (customize-set-variable 'org-id-locations-file
			    (expand-file-name "org/.org-d-locations" +emacs-data-dir))
    (customize-set-variable 'org-attach-id-dir
			    (expand-file-name "org/data/" +emacs-data-dir))
    (customize-set-variable 'org-publish-timestamp-directory
			    (expand-file-name "org/.org-timestamp/" +emacs-data-dir))
    (customize-set-variable 'org-preview-latex-image-directory
			    (expand-file-name "org/ltximg/" +emacs-data-dir))
    (customize-set-variable 'org-persist-directory
			    (expand-file-name "org/org-persist/" +emacs-data-dir))
    (customize-set-variable 'org-clock-persist-file
			    (expand-file-name "org/clock-persist.el" +emacs-data-dir))
    (customize-set-variable 'org-generic-id-locations-file
			    (expand-file-name ".org-generic-id-locations" +emacs-data-dir))
    (unless (file-directory-p org-persist-directory)
      (make-directory org-persist-directory :parents))
    #+end_src
*** capture template
***** =+org-archives-file=
      #+begin_src emacs-lisp
      (defvar +org-archives-file "archives.org"
	"Default target for storing archived entries.
      Is relative to `org-directory', unless it is absolute.")

      (defun +org-archives-file ()
	"Expand `+org-archives-file' from `org-directory'.
      If it is an absolute path return `+org-archives-file' verbatim."
	(expand-file-name +org-archives-file org-directory))
      #+end_src
***** =+org-capture-todo-file=
      #+begin_src emacs-lisp
      (defvar +org-capture-todo-file "todo.org"
        "Default target for todo entries.
                    Relative to `org-directory', unless it is absolute.")

      (defun +org-capture-todo-file ()
        "Expand `+org-capture-todo-file' from `org-directory'.
                    If it is an absolute path return `+org-capture-todo-file' verbatim."
        (expand-file-name +org-capture-todo-file org-directory))
      #+end_src
***** =+org-capture-notes-file=
      #+begin_src emacs-lisp
      (defvar +org-capture-notes-file "notes.org"
        "Default target for storing notes.
      Used as a fall back file for org-capture.el, for templates that do not specify a
      target file. Is relative to `org-directory', unless it is absolute.")

      (defun +org-capture-notes-file ()
        "Expand `+org-capture-notes-file' from `org-directory'.
      If it is an absolute path return `+org-capture-notes-file' verbatim."
        (expand-file-name +org-capture-notes-file org-directory))
      #+end_src
***** =+org-capture-links-file=
      #+begin_src emacs-lisp
      (defvar +org-capture-links-file "links.org"
        "Default target for storing timestamped journal entries.
      Is relative to `org-directory', unless it is absolute.")

      (defun +org-capture-links-file ()
        "Expand `+org-capture-links-file' from `org-directory'.
      If it is an absolute path return `+org-capture-links-file' verbatim."
        (expand-file-name +org-capture-links-file org-directory))
      #+end_src
***** =+org-capture-habits-file=
      #+begin_src emacs-lisp
      (defvar +org-capture-habits-file "habits.org"
        "Default target for storing repeated entries.
      Is relative to `org-directory', unless it is absolute.")

      (defun +org-capture-habits-file ()
        "Expand `+org-capture-habits-file' from `org-directory'.
      If it is an absolute path return `+org-capture-habits-file' verbatim."
        (expand-file-name +org-capture-habits-file org-directory))
      #+end_src
***** =+org-capture-projects-file=
      #+begin_src emacs-lisp
      (defvar +org-capture-projects-file "projects.org"
        "Default target for storing project entries.
      Is relative to `org-directory', unless it is absolute.")

      (defun +org-capture-projects-file ()
        "Expand `+org-capture-projects-file' from `org-directory'.
      If it is an absolute path return `+org-capture-projects-file' verbatim."
        (expand-file-name +org-capture-projects-file org-directory))
      #+end_src
***** capture file
     #+begin_src emacs-lisp
     (setq org-default-notes-file
	   (expand-file-name +org-capture-notes-file org-directory)
	   +org-capture-links-file
	   (expand-file-name +org-capture-links-file org-directory)
	   +org-capture-projects-file
	   (expand-file-name +org-capture-projects-file org-directory)
	   +org-capture-habits-file
	   (expand-file-name +org-capture-habits-file org-directory))
     #+end_src
**** personal
     #+begin_src emacs-lisp
     (setq org-capture-templates
	   '(("t" "Personal (t)Tasks")
	     ("tt" "(t)todo" entry
	      (file+headline +org-capture-todo-file "Inbox")
	      "** TODO [#A] %? %^G:followup:\n:PROPERTIES:\n:Via: %a\n:Note:\n:END:\n:LOGBOOK:\n- State \"TODO\"\tfrom\t\"\"\t%U\n:END:"
	      :empty-line 1
	      :clock-in t
	      :clock-resume t
	      :jump-to-captured t)
	     ("ts" "(p)In Progress Tasks" entry
	      (file+headline +org-capture-todo-file "Inbox")
	      "** PROG [#B] %? %^G:followup:\n:PROPERTIES:\n:Via: %a\n:Note:\n:END:\n:LOGBOOK:\n- State \"PROG\"\tfrom\t\"\"\t%U\n:END:"
	      :empty-line 1
	      :clock-in t
	      :clock-resume t
	      :jump-to-captured t)
	     ("tn" "(n)Notes" entry
	      (file+headline +org-capture-notes-file "Notes")
	      "** %? %^G\n:PROPERTIES:\n:Via: %a\n:Note:\n:END:\n"
	      :empty-line 1
	      :jump-to-captured t)
	     ("te" "(e)Next" entry
	      (file+headline +org-capture-todo-file "Inbox")
	      "** NEXT %^G\n:PROPERTIES:\n:Via: %a\n:Note:\n:END:\n"
	      :empty-line 1
	      :jump-to-captured t)
	     ("ti" "(I)Ideas" entry
	      (file+headline +org-capture-notes-file "Ideas")
	      "** MAYBE %^G\n:PROPERTIES:\n:Via: %a\n:Note:\n:END:\n"
	      :empty-line 1
	      :jump-to-captured t)
	     ("th" "(h)Habit" entry
	      (file+headline +org-capture-habits-file "Recurring")
	      "** TODO [#C] %? %^G:habit:\n SCHEDULED: %^t\n:PROPERTIES:\n:Style: habit\n:Note:\n:END:\n:LOGBOOK:\n- State \"TODO\"\tfrom \"\"\t%U\n:END:"
	      :empty-line 1
	      :jump-to-captured t)
	     ("td" "(d)Done" entry
	      (file+headline +org-capture-notes-file "Inbox")
	      "** DONE %?\nCLOSED: %U\n:PROPERTIES:\n:Via: %a\n:Note:\n:END:\n:LOGBOOK:\n- State \"DONE\"\tfrom \"\"\t%U\n:END:"
	      :empty-lines 1
	      :jump-to-captured t)))
     #+end_src
**** project
     #+begin_src emacs-lisp
     (setq org-capture-templates
	   (append org-capture-templates
		   '(("p" "Project")
		     ("pt" "Project (t)todo" entry
		      (file+headline +org-capture-projects-file "Inbox")
		      "** TODO [#A] %? %^G:project:\n:PROPERTIES:\n:Via: %a\n:Note:\n:END:\n:LOGBOOK:\n- State \"TODO\"\tfrom \"\"\t%U\n:END:"
		      :empty-line 1
		      :clock-in t
		      :clock-resume t
		      :jump-to-captured t)
		     ("pe" "project (e)Next" entry
		      (file+headline +org-capture-projects-file "Inbox")
		      "** NEXT %^G:project:\n:PROPERTIES:\n:Via: %a\n:Note:\n:END:\n:LOGBOOK:\n:END:"
		      :empty-line 1
		      :clock-in t
		      :clock-resume t
		      :jump-to-captured t)
		     ("pn" "project (n)Note" entry
		      (file+headline +org-capture-projects-file "Notes")
		      "** %? %^G:project:\n:PROPERTIES:\n:Via: %a\n:Note:\n:END:\n:LOGBOOK:\n:END:"
		      :empty-line 1
		      :clock-in t
		      :clock-resume t
		      :jump-to-captured t)
		     ("pi" "project ()Ideas" entry
		      (file+headline +org-capture-projects-file "Ideas")
		      "** MAYBE %^G:project:\n:PROPERTIES:\n:Via: %a\n:Note:\n:END:\n:LOGBOOK:\n:END:"
		      :empty-line 1
		      :clock-in t
		      :clock-resume t
		      :jump-to-captured t))))
     #+end_src
**** org-protocol
     #+begin_src emacs-lisp
     (setq org-capture-templates
	   (append org-capture-templates
		   '(("o" "org-protocol")
		     ("ot" "org-protocol TODO(t)"
		      entry (file+headline +org-capture-todo-file "Inbox")
		      "** TODO %?\n:PROPERTIES:\n:Via: %a\n:Note:\n:END:\n:LOGBOOK:\n- State \"TODO\"\tfrom \"\"\t%U\n:END:"
		      :empty-lines 1
		      :jump-to-captured t)
		     ("ol" "org-protocol Links(l)"
		      entry (file+headline +org-capture-links-file "Links")
		      "** %a %^G:website:\n\n%U\n\n%:initial %?"
		      :jump-to-capture t))))
     #+end_src
**** Settings up org-protocol
***** create a desktop application
      On /linux/ and some other /unix/ OS this is achieved by creating a =.desktop= file in =~/.local/share/applications/= folder. Here it's =~/.local/share/applications/org-protocol.desktop=.
      #+begin_src conf :tangle ~/.local/share/applications/org-protocol.desktop :mkdirp t
	[Desktop Entry]
	Name=Org-Protocol
	Exec=emacsclient %u
	Icon=emacs-icon
	Type=Application
	Terminal=false
	MimeType=x-scheme-handler/org-protocol
      #+end_src
      Then associate it with the =org-protocol://= link
      #+begin_src sh :tangle no :noeval
	[ $(command -v xdg-mime) ] && xdg-mime default org-protocol.desktop x-scheme-handler/org-protocol
      #+end_src

*** org-tempo
    #+begin_src emacs-lisp
    (require 'org-tempo)
    (add-to-list 'org-modules 'org-tempo t)
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("lisp" . "src lisp"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
    (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("go" . "src go"))
    (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
    (add-to-list 'org-structure-template-alist '("json" . "src json"))
    #+end_src
*** org-agenda
    #+begin_src emacs-lisp
    (setq org-agenda-files (list org-directory)
	  org-agenda-span 'day
	  org-agenda-window-setup (quote current-window)
	  org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled
	  org-agenda-include-diary t
	  org-agenda-custom-commands
	  `(("d" "Dashboard"
	     ((agenda "" ((org-deadline-warning-days 3)))
	      (tags-todo "+habit+TODO=\"TODO\"" ((org-agenda-overriding-header "Routine")))
	      (tags-todo "{project*}-TODO=\"DONE\"-TODO=\"SOMEDAY\"-TODO=\"LEARN\""
			 ((org-agenda-overriding-header "Projects:")))
	      (tags-todo "+followup" ((org-agenda-overriding-header "Needs Follow Up")))
	      (tags "+TODO=\"NEXT\"+learning+" ((org-agenda-overriding-header "Learning:")))
	      (alltodo ""
		       ((org-agenda-overriding-header "Inbox")))
	      (tags-todo "TODO=\"TODO\"-project-reading-errands-video"
			 ((org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
			  (org-agenda-skip-function
			   `(org-agenda-skip-entry-if
			     'notregexp ,(format "\\[#%s\\]" (char-to-string org-priority-highest))))
			  (org-agenda-prefix-format "%-6e ")
			  (org-agenda-max-entries nil)
			  (org-agenda-overriding-header "Unscheduled TODO entries: ")
			  (org-agenda-sorting-strategy '(priority-down effort-up tag-up category-keep))))))))
    #+end_src
*** org-clock
    #+begin_src emacs-lisp
    (setq org-clock-sound t
	  org-clock-persist 'history
	  org-clock-idle-time t
	  org-clock-out-remove-zero-time-clocks t)
    (org-clock-persistence-insinuate)
    #+end_src
*** org-refile and archive
    #+begin_src emacs-lisp
    (setq org-refile-targets
	  '((org-agenda-files :maxlevel . 9))
	  org-refile-use-cache t
	  org-refile-use-outline-path 'file
	  org-outline-path-complete-in-steps nil
	  org-refile-allow-creating-parent-nodes 'confirm
	  org-archive-location (concat +org-archives-file "::datetree/* Archived Tasks")
	  org-archive-mark-done t)
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
    #+end_src
*** stuck-projects
    #+begin_src emacs-lisp
      (setq org-stuck-projects
            '("+project/-MAYBE-DONE-SOMEDAY" ("TODO" "NEXT") nil ""))
    #+end_src
    This is a list of four items:
    1. A tags/todo/property matcher string that is used to identify a project.
       See the manual for a description of tag and property searches.
       The entire tree below a headline matched by this is considered one project.
    2. A list of TODO keywords identifying non-stuck projects.
       If the project subtree contains any headline with one of these todo
       keywords, the project is considered to be not stuck.  If you specify
       "*" as a keyword, any TODO keyword will mark the project unstuck.
    3. A list of tags identifying non-stuck projects.
       If the project subtree contains any headline with one of these tags,
       the project is considered to be not stuck.  If you specify "*" as
       a tag, any tag will mark the project unstuck.  Note that this is about
       the explicit presence of a tag somewhere in the subtree, inherited
       tags do not count here.  If inherited tags make a project not stuck,
       use "-TAG" in the tags part of the matcher under (1.) above.
    4. An arbitrary regular expression matching non-stuck projects.
*** org-log
    #+begin_src emacs-lisp
      (setq org-log-done 'time
            org-log-refile 'time
            org-log-redeadline 'time
            org-log-note-clock-out t
            org-log-into-drawer t
            org-log-note-headings '((done . "CLOSING NOTE %t")
                                    (state . "State %-12s from %-12S %t")
                                    (note . "Note taken on %t")
                                    (reschedule . "Rescheduled from %S on %t")
                                    (delschedule . "Not scheduled, was %S on %t")
                                    (redeadline . "New deadline from %S on %t")
                                    (deldeadline . "Removed deadline, was %S on %t")
                                    (refile . "Refiled on %t")
                                    (clock-out . "")))
    #+end_src
*** habits
    #+begin_src emacs-lisp
      (add-to-list 'org-modules 'org-habit t)
      (setq org-habit-preceeding-days 7)
      (setq org-habit-following-days 3)
      (setq org-habit-graph-column 80)
      (setq org-habit-show-habits-only-for-today nil)
      (setq org-treat-insert-todo-heading-as-state-change t)
    #+end_src
*** Todos and tags
    #+begin_src emacs-lisp
      (setq org-todo-keywords
            '((sequence "TODO(t!)"
                        "PROG(p@/!)"
                        "WAITING(w@/!)"
                        "NEXT(n@/!)"
                        "MAYBE(m!)"
                        "|"
                        "DONE(d!)"
                        "CANCELLED(c@/!)")))

      (setq org-todo-keyword-faces
            '(("TODO" . (:foreground "#dc322f" :weight bold))
              ("PROG" . (:foreground "#b58900"))
              ("WAITING" . (:foreground "#859900"))
              ("DONE" . (:foreground "#2aa198"))
              ("MAYBE" . (:foreground "#FF2AFC"))
              ("CANCELLED" . (:foreground "#657b83"))))
      (setq org-complete-tags-always-offer-all-agenda-tags nil)
    #+end_src
*** Attach
    #+begin_src emacs-lisp
      (setq org-attach-directory (expand-file-name "data" org-directory))
      (setq org-attach-dir-relative t)
      (setq org-attach-archive-delete 'query)
      (add-hook 'dired-mode-hook
                (lambda ()
                  (define-key dired-mode-map
                    (kbd "C-c C-x a")
                    #'org-attach-dired-to-subtree)))
    #+end_src
*** babel
    see [[https://www.gnu.org/software/emacs/manual/html_node/org/Languages.html][here]] for available languages.
    #+begin_src emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (awk . t)
         (C . t)
         (css . t)
         (calc . t)
         (screen . t)
         (dot . t )
         (haskell . t)
         (java . t)
         (js . t)
         (latex . t)
         (lisp . t)
         (lua . t)
         (org . t)
         (perl . t)
         (python .t)
         (ruby . t)
         (shell . t)
         (sed . t)
         (scheme . t)
         (sql . t)
         (sqlite . t)))
    #+end_src
*** Global keybindings
    #+begin_src emacs-lisp
      (global-set-key (kbd "C-c l") 'org-store-link)
      (global-set-key (kbd "C-c a") 'org-agenda)
      (global-set-key (kbd "C-c c") 'org-capture)
    #+end_src
*** footer
    #+begin_src emacs-lisp
    (provide 'builtin-org)
    ;;; builtin-org.el ends here
    #+end_src
**** general
     #+begin_src emacs-lisp
     (with-eval-after-load 'config-general
       (progn
	 (require 'general)
	 (+config/leader-def
	   :states '(normal visual)
	   "ol" '(:ignore t :which-key "Links prefix")
	   "oa" '(:ignore t :which-key "Agenda prefix")
	   "oly" 'org-store-link
	   "olp" 'org-insert-link
	   "oa" 'org-agenda
	   "x" 'org-capture)))
     #+end_src
** org-roam
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-org-roam.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-org-roam.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (if (or (getenv "GUIX_LOCPATH")
            (string= "exwm" (getenv "DESKTOP_SESSION")))
        (progn
          (straight-use-package '(org-roam :type built-in))
          (straight-use-package '(emacsql :type built-in))
          (straight-use-package '(emacsql-sqlite :type built-in)))
      (straight-use-package 'org-roam))
    (straight-use-package 'org-roam-ui)
    (when (featurep 'consult)
      (straight-use-package
       '(consult-org-roam :type git
                          :host github
                          :repo "jgru/consult-org-roam"))
      (require 'consult-org-roam))
    #+end_src
*** for freebsd
    Need to install =emacsql= package from =pkg=.
    #+begin_src emacs-lisp
    (when (and (string= "berkeley-unix" system-type)
	       (executable-find "emacsql-sqlite"))
      (straight-use-package '(emacsql :type built-in))
      (straight-use-package '(emacsql-sqlite :type built-in))
      (require 'emacsql)
      (require 'emacsql-sqlite)
      (setq emacsql-data-root
	    (concat "/usr/local/share/emacs/"
		    emacs-version
		    "/site-lisp/emacsql/"))
      (setq emacsql-sqlite-data-root emacsql-data-root)
      (setq emacsql-sqlite-executable "/usr/local/bin/emacsql-sqlite"))
    #+end_src
*** config
    #+begin_src emacs-lisp
    (customize-set-variable 'org-roam-db-location (expand-file-name "org-roam.db" +emacs-data-dir))
    (add-hook 'org-roam-backlinks-mode 'turn-on-visual-line-mode)
    ;; Make org-roam buffer sticky; i.e. don't replace it when opening a
    ;; file with an *-other-window command.
    (setq org-roam-buffer-window-parameters '((no-delete-other-windows . t)))
    (setq org-roam-link-use-custom-faces 'everywhere)
    (setq org-roam-completion-everywhere t)

    (setq org-roam-directory
	  (file-name-as-directory
	   (file-truename
	    (expand-file-name "roam" org-directory)))
	  org-roam-completion-everywhere t
	  org-roam-mode-section-functions
	  #'(org-roam-backlinks-section
	     org-roam-reflinks-section))
    (unless (file-directory-p org-roam-directory)
      (make-directory org-roam-directory :parents))
    (org-roam-db-autosync-mode)

    ;; Hide the mode line in the org-roam buffer, since it serves no purpose. This
    ;; makes it easier to distinguish from other org buffers.
    (add-hook 'org-roam-buffer-prepare-hook #'hide-mode-line-mode)
    #+end_src
*** roam-daily
    #+begin_src emacs-lisp
    (require 'org-roam-dailies)
    (setq org-roam-dailies-directory
	  (file-name-as-directory
	   (file-truename
	    (expand-file-name "daily" org-roam-directory))))
    #+end_src
*** org-roam-graph
    #+begin_src emacs-lisp
    (require 'org-roam-graph)
    #+end_src
*** roam-ui
    #+begin_src emacs-lisp
    (setq org-roam-node-display-template
	  (concat "${title:*} "
		  (propertize "${tags:10}" 'face 'org-tag)))

    (add-to-list 'display-buffer-alist
		 '("\\*org-roam\\*"
		   (display-buffer-in-side-window)
		   (side . right)
		   (slot . 0)
		   (window-width . 0.33)
		   (window-parameters . ((no-other-window . t)
					 (no-delete-other-windows . t)))))
    (setq org-roam-ui-sync-theme t
	  org-roam-ui-follow t
	  org-roam-ui-update-on-save t
	  org-roam-ui-open-on-start nil)
    (require 'server)
    (unless (server-running-p)
      (server-start))
    (require 'org-protocol)
    (require 'org-roam-protocol)
    (setq org-roam-capture-templates
	  (quote (("r" "reference" plain "%?"
		   :if-new (file+head "reference/${title}.org" "#+title: ${title}\n")
		   :immediate-finish t
		   :unnarrowed t)
		  ("a" "article" plain "%?"
		   :if-new (file+head "articles/${title}.org" "#+title: ${title}\n#+filetags: :article:\n")
		   :immediate-finish t
		   :unnarrowed t)
		  ("d" "default" plain
		   "* ${title}\n%?" :if-new
		   (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			      "#+title: ${title}\n#+filetags:\n#+date: %<%Y-%m-%d>\n\n")
		   :unnarrowed t)
		  )))
    (setq org-roam-capture-ref-templates
	  (quote (("r" "ref" plain
		   "%?"
		   :if-new (file+head
			    "%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}.org\" (current-time) t)"
			    "#+title: ${title}\n#+filetags:\n#+date: %<%Y-%m-%d>\n\n")
		   :unnarrowed t :jump-to-captured t))))
    (setq org-roam-dailies-capture-templates
	  (quote (("d" "Default" plain
		   "%?"
		   :if-new (file+head
			    "%(format-time-string \"%Y-%m-%d--journal.org\" (current-time) t)"
			    "#+title: Journal %<%Y-%m-%d>\n#+date: %<%Y-%m-%d>\n#+journal: private journal\n\n\n")
		   :unnarrowed t))))
    #+end_src
*** consult-integration
    #+begin_src emacs-lisp
    (when (featurep 'consult)
      (require 'consult-org-roam)
      (consult-org-roam-mode 1))
    #+end_src
*** Keybindings
    #+begin_src emacs-lisp
    (global-set-key (kbd "C-c r i") 'org-roam-node-insert)
    (global-set-key (kbd "C-c r f") 'org-roam-node-find)
    (global-set-key (kbd "C-c r c") 'org-roam-capture)
    (global-set-key (kbd "C-c r g") 'org-roam-graph)
    (global-set-key (kbd "C-c r I") 'org-roam-update-org-id-locations)
    (global-set-key (kbd "C-c r b") 'org-roam-buffer-toggle)
    (global-set-key (kbd "C-c r B") 'org-roam-buffer-display-dedicated)
    (global-set-key (kbd "C-c r s") 'org-roam-db-sync)
    (global-set-key (kbd "C-c r r") 'org-roam-refile)
    (global-set-key (kbd "C-c r t") 'org-roam-tag-add)
    (global-set-key (kbd "C-c r T") 'org-roam-tag-remove)
    (global-set-key (kbd "C-c r u") 'org-roam-ui-open)
    (when (featurep 'consult-org-roam)
      (global-set-key (kbd "C-c r e") 'consult-org-roam-file-find)
      (global-set-key (kbd "C-c r x") 'consult-org-roam-backlinks)
      (global-set-key (kbd "C-c r S") 'consult-org-roam-search))
    #+end_src
**** general
     #+begin_src emacs-lisp
     (with-eval-after-load 'config-general
       (progn
	 (require 'general)
	 (+config/leader-def
	   :states '(normal visual)
	   "or" '(:ignore t :which-key "Roam prefix")
	   "ori" 'org-roam-node-insert
	   "orI" 'org-roam-update-org-id-locations
	   "orf" 'org-roam-node-find
	   "orc" 'org-roam-capture
	   "orb" 'org-roam-buffer-toggle
	   "orB" 'org-roam-buffer-display-dedicated
	   "org" 'org-roam-graph
	   "oru" 'org-roam-ui-open
	   "orr" 'org-roam-refile
	   "ort" 'org-roam-tag-add
	   "orT" 'org-roam-tag-remove
	   "ors" 'org-roam-db-sync)))
     (with-eval-after-load 'consult-org-roam
       (progn
	 (require 'general)
	 (+config/leader-def
	   :states '(normal visual)
	   "ore" 'consult-org-roam-file-find
	   "orx" 'consult-org-roam-backlinks
	   "orS" 'consult-org-roam-search)))
     #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-org-roam)
    ;;; config-org-roam.el ends here
    #+end_src
** org-elfeed
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-org-elfeed.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-org-elfeed.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'elfeed)
    (straight-use-package 'elfeed-org)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (require 'elfeed)
    (setq rmh-elfeed-org-files (list (concat org-directory "/elfeed.org")))
    (eval-after-load 'elfeed
      `(make-directory ,(expand-file-name "elfeed/" +emacs-data-dir) t))
    (setq elfeed-db-directory (expand-file-name "elfeed/db/" +emacs-data-dir))
    (setq elfeed-enclosure-default-dir (expand-file-name "elfeed/enclosures/" +emacs-data-dir))
    (setq elfeed-score-score-file (expand-file-name "elfeed/score/score.el" +emacs-data-dir))
    (elfeed-org)
    #+end_src
*** elfeed notification
    #+begin_src emacs-lisp
    (defvar +config/elfeed-update-complete-hook nil
      "Functions called with no arguments when `elfeed-update' is finished.")

    (defvar +config/elfeed-updates-in-progress 0
      "Number of feed updates in-progress.")

    (defvar +config/elfeed-search-update-filter nil
      "The filter when `elfeed-update' is called.")

    (defun +config/elfeed-update-complete-hook (&rest ignore)
      "When update queue is empty, run `+config/elfeed-update-complete-hook' functions."
      (when (= 0 +config/elfeed-updates-in-progress)
	(run-hooks '+config/elfeed-update-complete-hook)))

    (add-hook 'elfeed-update-hooks #'+config/elfeed-update-complete-hook)

    (defun +config/elfeed-update-message-completed (&rest _ignore)
      (message "Feeds updated")
      (notifications-notify :title "Elfeed" :body "Feeds updated."))

    (add-hook '+config/elfeed-update-complete-hook #'+config/elfeed-update-message-completed)

    (defun +config/elfeed-search-update-restore-filter (&rest ignore)
      "Restore filter after feeds update."
      (when +config/elfeed-search-update-filter
	(elfeed-search-set-filter +config/elfeed-search-update-filter)
	(setq +config/elfeed-search-update-filter nil)))

    (add-hook '+config/elfeed-update-complete-hook #'+config/elfeed-search-update-restore-filter)

    (defun +config/elfeed-search-update-save-filter (&rest ignore)
      "Save and change the filter while updating."
      (setq +config/elfeed-search-update-filter elfeed-search-filter)
      (setq elfeed-search-filter "#0"))

    ;; NOTE: It would be better if this hook were run before starting the feed updates, but in
    ;; `elfeed-update', it happens afterward.
    (add-hook 'elfeed-update-init-hooks #'+config/elfeed-search-update-save-filter)

    (defun +config/elfeed-update-counter-inc (&rest ignore)
      (cl-incf +config/elfeed-updates-in-progress))

    (advice-add #'elfeed-update-feed :before #'+config/elfeed-update-counter-inc)

    (defun +config/elfeed-update-counter-dec (&rest ignore)
      (cl-decf +config/elfeed-updates-in-progress)
      (when (< +config/elfeed-updates-in-progress 0 ; >
	       )
	;; Just in case
	(setq +config/elfeed-updates-in-progress 0)))

    (add-hook 'elfeed-update-hooks #'+config/elfeed-update-counter-dec)
    #+end_src
*** Keybinding
    #+begin_src emacs-lisp
    (global-set-key (kbd "C-c e e") 'elfeed)
    (global-set-key (kbd "C-c e u") 'elfeed-update)
    (global-set-key (kbd "C-c e U") 'elfeed-update-feed)
    #+end_src
**** general
     #+begin_src emacs-lisp
     (with-eval-after-load 'config-general
       (progn
	 (require 'general)
	 (+config/leader-def
	   :states '(normal visual)
	   "e" '(:ignore t :which-key "Elfeed prefix")
	   "ee" 'elfeed
	   "eu" 'elfeed-update
	   "eU" 'elfeed-update-feed)))
     #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-org-elfeed)
    ;;; config-org-elfeed.el ends here
    #+end_src
** org-gcal
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-org-gcal.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-org-gcal.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'org-gcal)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (defun +config/org-gcal-setup-sync (&optional dir id secret)
      "Setup gcal with optional args DIR, ID and SECRET."
      ;; require
      (require 'config-pass)
      (require 'org-gcal)
      (if dir
	  (setq org-gcal-dir dir)
	(setq org-gcal-dir (expand-file-name "org/gcal/" +emacs-data-dir)))
      (if id
	  (setq org-gcal-client-id id)
	(setq org-gcal-client-id (password-store-get "console.cloud.google.com/gcal/id")))
      (if secret
	  (setq org-gcal-client-secret secret)
	(setq org-gcal-client-secret (password-store-get "console.cloud.google.com/gcal/secret"))))
    #+end_src
*** Keybinding
    #+begin_src emacs-lisp
    (global-set-key (kbd "C-c g s") 'org-gcal-sync)
    (global-set-key (kbd "C-c g f") 'org-gcal-fetch)
    #+end_src
**** general
     #+begin_src emacs-lisp
     (with-eval-after-load 'config-general
       (progn
	 (require 'general)
	 (+config/leader-def
	   :states '(normal visual)
	   "og" '(:ignore t :which-key "Org-Gcal prefix")
	   "ogs" 'org-gcal-sync
	   "ogf" 'org-gcal-fetch)))
     #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-org-gcal)
    ;;; config-org-gcal.el ends here
    #+end_src
** org-journal
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-org-journal.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-org-journal.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'org-journal)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (setq org-journal-dir (expand-file-name "journal" org-directory)
	  org-journal-enable-agenda-integration t
	  org-journale-enable-cache t
	  org-journal-follow-mode t
	  org-journal-prefix-key "C-c j")

    (defun +org-journal-find-location ()
      "Open today's journal, but specify a non-nil prefix argument in order to
      inhibit inserting the heading; org-capture will insert the heading."
      (org-journal-new-entry t)
      (unless (eq org-journal-file-type 'daily)
	(org-narrow-to-subtree))
      (goto-char (point-max)))

    (defvar +org-journal--date-location-scheduled-time nil)

    (defun +org-journal-date-location (&optional scheduled-time)
      (let ((scheduled-time (or scheduled-time (org-read-date nil nil nil "Date:"))))
	(setq +org-journal--date-location-scheduled-time scheduled-time)
	(org-journal-new-entry t (org-time-string-to-time scheduled-time))
	(unless (eq org-journal-file-type 'daily)
	  (org-narrow-to-subtree))
	(goto-char (point-max))))

    (defun +org-journal-save-entry-and-exit()
      "Simple convenience function.
	 Saves the buffer of the current day's entry and kills the window
	 Similar to org-capture like behavior"
      (interactive)
      (save-buffer)
      (kill-buffer-and-window))

    (require 'org-journal)
    ;; this messes up org-clock
    ;;(define-key org-journal-mode-map (kbd "C-x C-s") '+org-journal-save-entry-and-exit)
    #+end_src
*** capture templates
    #+begin_src emacs-lisp
    (setq org-capture-templates
	  (append org-capture-templates
		  '(("j" "Journal")
		    ("jt" "Journal Today" plain (function +org-journal-find-location)
		     "** %(format-time-string org-journal-time-format)%^{Title}\n%i%?"
		     :jump-to-captured t
		     :immediate-finish t)
		    ("js" "Scheduled Journal" plain (function +org-journal-date-location)
		     "** TODO %?\n <%(princ +org-journal--date-location-scheduled-time)>\n"
		     :jump-to-captured t))))
    #+end_src
*** keybinding
**** general
     #+begin_src emacs-lisp
     (with-eval-after-load 'config-general
       (require 'general)
       (+config/leader-def
	 :states '(normal visual)
	 "oj" '(:ignore t :which-key "Org-journal Prefix")
	 "ojs" 'org-journal-search
	 "ojj" 'org-journal-new-entry)
       (general-define-key
	:prefix +general-leader
	:non-normal-prefix +general-local-leader
	:states '(normal visual)
	:keymaps 'org-journal-mode-map
	"ojf" 'org-journal-next-entry
	"ojb" 'org-journal-previous-entry))
     #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-org-journal)
    ;;; config-org-gcal.el ends here
    #+end_src
* Tools
** builtins
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/builtin-tools.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-builtin-tools.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** =tramp=
    #+begin_src emacs-lisp
    (with-eval-after-load 'tramp
      (setq tramp-remote-path
            (append tramp-remote-path
                    '(tramp-own-remote-path))
            tramp-auto-save-directory
            (expand-file-name "tramp/auto-save/" +emacs-data-dir)
            tramp-default-method "ssh"
            tramp-persistency-file-name
            (expand-file-name "tramp/persistency.el" +emacs-data-dir)
            remote-file-name-inhibit-cache 60
            tramp-completion-reread-directory-timeout 60
            tramp-verbose 1
            vc-ignore-dir-regexp
            (format "%s\\|%s\\|%s"
                    vc-ignore-dir-regexp
                    tramp-file-name-regexp
                    "[/\\\\]node_modules")))
    #+end_src
*** =dired=
    #+begin_src emacs-lisp
    (with-eval-after-load 'dired
      (setq auto-revert-verbose t
            auto-revert-use-notify nil
            auto-revert-stop-on-user-input nil
            revert-without-query (list ".")
            image-dired-db-file (expand-file-name "image-dired/db.el" +emacs-data-dir)
            image-dired-dir (expand-file-name "image-dired/" +emacs-data-dir)
            image-dired-gallery-dir (expand-file-name "image-dired/gallery/" +emacs-data-dir)
            image-dired-temp-image-file (expand-file-name "image-dired/temp-image" +emacs-data-dir)
            image-dired-temp-rotate-image-file (expand-file-name "image-dired/temp-rotate-image" +emacs-data-dir)
            dired-dwim-target t
            dired-hide-details-hide-symlink-targets nil
            dired-auto-revert-buffer #'dired-buffer-stale-p
            dired-recursive-copies  'always
            dired-recursive-deletes 'top
            dired-create-destination-dirs 'ask))
    (add-hook 'dired-load-hook
              (function (lambda () (load "dired-x"))))

    (customize-set-variable 'global-auto-revert-non-file-buffers t)
    #+end_src
*** footer
    #+begin_src emacs-lisp
    (provide 'builtin-tools)
    ;;; builtin-tools.el ends here
    #+end_src
** flycheck
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-flycheck.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-flycheck.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** variables
    #+begin_src emacs-lisp
    (let ((chicken-executables
	   (cond ((string= "arch"
			   (getenv "DISTRO"))
		  "chicken-csc"))))
      (customize-set-variable 'flycheck-scheme-chicken-executable chicken-executables))
    (customize-set-variable 'flycheck-emacs-lisp-load-path 'inherit)
    (with-eval-after-load 'flycheck
      (delq 'new-line flycheck-check-syntax-automatically))
    (customize-set-variable 'flycheck-buffer-switch-check-intermediate-buffers t)
    (customize-set-variable 'flycheck-display-errors-delay 0.25)
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'flycheck)
    #+end_src
*** consult integration
    #+begin_src emacs-lisp
    (when (featurep 'consult)
      (straight-use-package 'consult-flycheck))
    (global-flycheck-mode)
    (when (featurep 'consult)
      (require 'consult-flycheck)
      (with-eval-after-load 'config-general
	(progn
	  (require 'general)
	  (+config/leader-def
	    :states '(normal visual)
	    "/ff" 'consult-flycheck))))
    #+end_src
*** keybinding
**** general
     #+begin_src emacs-lisp
     (with-eval-after-load 'config-general
       (require 'general)
       (general-define-key
	:keymaps 'flycheck-error-list-mode-map
	:states '(normal visual)
	"C-n" #'flycheck-error-list-next-error
	"C-p" #'flycheck-error-list-previous-error
	"j" #'flycheck-error-list-next-error
	"k" #'flycheck-error-list-previous-error
	"RET" #'flycheck-error-list-goto-error
	[return] #'flycheck-error-list-goto-error))
     #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-flycheck)
    ;;; config-flycheck.el ends here
    #+end_src
** projectile
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-projectile.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-projectile.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** config
    #+begin_src emacs-lisp
    (straight-use-package 'projectile)
    (customize-set-variable 'projectile-cache-file (expand-file-name "projectile.cache" +emacs-data-dir))
    (customize-set-variable 'projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" +emacs-data-dir))
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (when (featurep 'consult)
      (straight-use-package '(consult-projectile :type git
						 :host gitlab
						 :repo "OlMon/consult-projectile"
						 :branch "master")))
    #+end_src
**** general
     #+begin_src emacs-lisp
     (with-eval-after-load 'config-general
       (progn
	 (require 'general)
	 (+config/leader-def
	   :states '(normal visual)
	   "p" (general-simulate-key "C-c p"
		 :name +projectile-prefix
		 :which-key "Projectile prefix"))))
     #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-projectile)
    ;;; config-projectile.el ends here
    #+end_src
** lsp-mode
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-lsp-mode.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-lsp-mode.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'lsp-mode)
    (straight-use-package 'lsp-ui)
    (when (featurep 'consult)
      (straight-use-package 'consult-lsp))

    (when (featurep 'treemacs)
      (straight-use-package 'lsp-treemacs)
      (lsp-treemacs-sync-mode 1))
    #+end_src
*** config
    #+begin_src emacs-lisp
    (setq lsp-keymap-prefix "C-c L")
    (customize-set-variable 'lsp-completion-provider :none)
    (customize-set-variable 'lsp-toml-cache-path (expand-file-name ".cache/lsp/toml/" +emacs-data-dir))
    (customize-set-variable 'lsp-pwsh-ext-path (expand-file-name ".cache/lsp/pwsh/" +emacs-data-dir))
    (customize-set-variable 'lsp-pwsh-log-path (expand-file-name ".cache/lsp/pwsh/logs/" +emacs-data-dir))
    (customize-set-variable 'lsp-magik-lsp-path (expand-file-name ".cache/magik-lsp/magik-language-server-0.5.1.jar" +emacs-data-dir))
    (customize-set-variable 'lsp-eslint-unzipped-path (expand-file-name ".cache/lsp/eslint/unzipped/" +emacs-data-dir))
    (customize-set-variable 'lsp-rust-analyzer-store-path (expand-file-name ".cache/lsp/rust/rust-analyzer/" +emacs-data-dir))
    (customize-set-variable 'lsp-clojure-workspace-cache-dir (expand-file-name ".cache/lsp/clojure/" +emacs-data-dir))
    (defun +config/lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
	    '(orderless))) ;; Configure flex

    (let ((taplo-binary
	   (cond ((file-exists-p "/usr/bin/taplo")
		  "/usr/bin/taplo")
		 ((file-exists-p "/usr/local/bin/taplo")
		  "/usr/local/bin/taplo")
		 ((file-exists-p (concat (getenv "HOME") ".local/bin/taplo"))
		  (concat (getenv "HOME") ".local/bin/taplo")))))
      (when taplo-binary
	(customize-set-variable 'lsp-toml-command taplo-binary)))

    (require 'lsp-mode)
    #+end_src
*** hook
    #+begin_src emacs-lisp
    (add-hook 'c-mode-hook #'lsp-deferred)
    (add-hook 'c++-mode-hook #'lsp-deferred)
    (add-hook 'shell-mode-hook #'lsp-deferred)
    (add-hook 'yaml-mode-hook #'lsp-deferred)
    (customize-set-variable 'lsp-yaml-schema-store-local-db (expand-file-name ".cache/lsp/lsp-yaml-schemas.json" +emacs-data-dir))
    (add-hook 'rust-mode-hook #'lsp-deferred)
    (add-hook 'toml-mode-hook #'lsp)
    (add-hook 'python-mode-hook #'lsp-deferred)
    (add-hook 'nix-mode-hook #'lsp-deferred)
    (add-hook 'nginx-mode-hook #'lsp-deferred)
    (add-hook 'markdown-mode-hook #'lsp-deferred)
    (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
    (add-hook 'lsp-completion-mode-hook #'+config/lsp-mode-setup-completion)

    (when (featurep 'consult)
      (straight-use-package 'consult-lsp)
      (define-key lsp-mode-map [remap xref-find-apropos] #'consult-lsp-symbols))
    #+end_src
*** general
    #+begin_src emacs-lisp
    (with-eval-after-load 'config-general
      (progn
	(require 'general)
	(+config/leader-def
	  :states '(normal visual)
	  "L" (general-simulate-key "C-c L"
		:name +lsp-keymap-prefix
		:which-key "LSP prefix"))))
    #+end_src
*** python deps
    lsp server.
    #+begin_src sh :tangle no
    pip install 'python-lsp-server[all]'
    #+end_src
*** extra deps
**** pyls-flake8
     #+begin_src sh :tangle no
     pip install pyls-flake8
     #+end_src
**** pyls-mypy
     #+begin_src sh :tangle no
     pip install pyls-mypy
     #+end_src
**** pyls-isort
     #+begin_src sh :tangle no
     pip install pyls-isort
     #+end_src
**** python-lsp-black
     #+begin_src sh :tangle no
     pip install python-lsp-black
     #+end_src
**** pyls-memestra
     #+begin_src sh :tangle no
     pip install pyls-memestra
     #+end_src
**** pylsp-rope
     #+begin_src sh :tangle no
     pip install pylsp-rope
     #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-lsp-mode)
    ;;; config-lsp-mode.el ends here
    #+end_src
** git-gutter
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-git-gutter.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-git-gutter.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    ;; (straight-use-package 'git-gutter)
    (straight-use-package 'git-gutter-fringe)
    #+end_src
*** variables
    #+begin_src emacs-lisp
    (require 'git-gutter-fringe)

    ;; this is from doom
    (defvar +vc-gutter-in-remote-files nil
      "If non-nil, enable the vc gutter in remote files (e.g. open through TRAMP).")

    ;; Disable in Org mode, as per syl20bnr/spacemacs#10555 and
    ;; syohex/emacs-git-gutter#24. Apparently, the mode-enabling function for
    ;; global minor modes gets called for new buffers while they are still in
    ;; `fundamental-mode', before a major mode has been assigned. I don't know why
    ;; this is the case, but adding `fundamental-mode' here fixes the issue.
    (setq git-gutter:disabled-modes '(fundamental-mode image-mode pdf-view-mode))
    #+end_src
*** hooks
    #+begin_src emacs-lisp
    (add-hook 'find-file-hook
	      (defun +vc-gutter-init-maybe-h ()
		"Enable `git-gutter-mode' in the current buffer.
	 If the buffer doesn't represent an existing file, `git-gutter-mode's activation
	 is deferred until the file is saved. Respects `git-gutter:disabled-modes'."
		(let ((file-name (buffer-file-name (buffer-base-buffer))))
		  (cond
		   ((and (file-remote-p (or file-name default-directory))
			 (not +vc-gutter-in-remote-files)))
		   ;; If not a valid file, wait until it is written/saved to activate
		   ;; git-gutter.
		   ((not (and file-name (vc-backend file-name)))
		    (add-hook 'after-save-hook #'+vc-gutter-init-maybe-h nil 'local))
		   ;; Allow git-gutter or git-gutter-fringe to activate based on the type
		   ;; of frame we're in. This allows git-gutter to work for silly geese
		   ;; who open both tty and gui frames from the daemon.
		   ((if (and (display-graphic-p)
			     (require 'git-gutter-fringe nil t))
			(setq-local git-gutter:init-function      #'git-gutter-fr:init
				    git-gutter:view-diff-function #'git-gutter-fr:view-diff-infos
				    git-gutter:clear-function     #'git-gutter-fr:clear
				    git-gutter:window-width -1)
		      (setq-local git-gutter:init-function      'nil
				  git-gutter:view-diff-function #'git-gutter:view-diff-infos
				  git-gutter:clear-function     #'git-gutter:clear-diff-infos
				  git-gutter:window-width 1))
		    (unless (memq major-mode git-gutter:disabled-modes)
		      (git-gutter-mode +1)
		      (remove-hook 'after-save-hook #'+vc-gutter-init-maybe-h 'local)))))))
    (setq git-gutter:disabled-modes '(fundamental-mode image-mode pdf-view-mode))
    (add-hook 'focus-in-hook #'git-gutter:update-all-windows)
    #+end_src
*** avoid collision with flycheck
    #+begin_src emacs-lisp
    ;; avoid collision with flycheck
    (when (featurep 'flycheck)
      (setq flycheck-indication-mode 'right-fringe))
    #+end_src
*** custom functions
    #+begin_src emacs-lisp
    (unless (featurep 'evil)
      (defun +git-gutter:next-hunk ()
	(interactive)
	(git-gutter:next-hunk 1)
	(set-temporary-overlay-map
	 (let ((map (make-sparse-keymap)))
	   (define-key map (kbd "C-n") (git-gutter:next-hunk 1))
	   map)))
      (defun +git-gutter:previous-hunk ()
	(interactive)
	(git-gutter:previous-hunk 1)
	(set-temporary-overlay-map
	 (let ((map (make-sparse-keymap)))
	   (define-key map (kbd "C-p") (git-gutter:previous-hunk 1))
	   map))))
    #+end_src
*** keybinding
**** hydra
     #+begin_src emacs-lisp
     (when (featurep 'hydra)
       (defhydra hydra-git-gutter (global-map
				   "C-c g")
	 "
     git-gutter^
     "
	 ("p" git-gutter:previous-hunk "previous hunk")
	 ("n" git-gutter:next-hunk "next hunk")
	 ("P" git-gutter:popup-hunk "pop hunk")
	 ("s" git-gutter:stage-hunk "stage hunk")
	 ("r" git-gutter:revert-hunk "revert hunk")
	 ("u" git-gutter:update-all-windows "update all windows")))
     #+end_src
**** general
     #+begin_src emacs-lisp
     (when (featurep 'general)
       (+config/leader-def
	 :states '(normal visual)
	 "gs" 'git-gutter:stage-hunk
	 "gr" 'git-gutter:revert-hunk
	 "gu" 'git-gutter:stage-hunk)
       (when (featurep 'evil)
	 (general-define-key
	  :keymaps '(normal visual)
	  :prefix +general-leader
	  :repeat t
	  :jump t
	  "gk" 'git-gutter:previous-hunk
	  "gj" 'git-gutter:next-hunk)))
     #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-git-gutter)
    ;;; config-lsp-mode.el ends here
    #+end_src
** password-store
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-pass.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-defaults-tools.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'pass)
    (straight-use-package 'password-store)
    (straight-use-package 'password-store-otp)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (setq password-store-password-length 12)
    (auth-source-pass-enable)
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-pass)
    ;;; config-pass.el ends here
    #+end_src
** magit
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-magit.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-magit.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'magit)
    (straight-use-package 'diff-hl)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (customize-set-variable 'transient-levels-file (expand-file-name "transient/levels.el" +emacs-data-dir))
    (customize-set-variable 'transient-values-file (expand-file-name "transient/values.el" +emacs-data-dir))
    (customize-set-variable 'transient-history-file (expand-file-name "transient/history.el" +emacs-data-dir))
    (require 'magit)
    (require 'diff-hl)
    (transient-append-suffix 'magit-log "a"
      '("w" "Wip" magit-wip-log-current))
    (transient-append-suffix 'magit-log "-A"
      '("-m" "Omit merge commits" "--no-merges"))
    (setq magit-log-arguments '("-n100" "--graph" "--decorate"))
    (add-hook 'magit-pre-refresh-hook #'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh)
    (add-hook 'magit-mode-hook #'hl-line-mode)
    #+end_src
*** Add keybinding if missing
    #+begin_src emacs-lisp
    (unless (key-binding (kbd "C-x g"))
      (if (featurep 'evil)
	  (+config/leader-def
	    :states '(normal visual)
	    "gg" 'magit-status)
	(global-set-key (kbd "C-x g") 'magit-status)))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-magit)
    ;;; config-magit.el ends here
    #+end_src
** git-modes
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-git-modes.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-git-modes.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'git-modes)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (add-to-list 'auto-mode-alist
		 (cons "/.dockerignore\\'" 'gitignore-mode)
		 (cons "/.griveignore\\'" 'gitignore-mode))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-git-modes)
    ;;; config-git-modes.el ends here
    #+end_src
** slime
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-slime.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-slime.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'slime)
    (require 'slime)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (when (file-exists-p (expand-file-name "slime-helper.el" +quicklisp-path))
      (load (expand-file-name "slime-helper.el" +quicklisp-path))
      (slime-setup '(slime-fancy)))
    (defun slime-description-fontify ()
      "Fontify sections of SLIME Description."
      (with-current-buffer "*SLIME Description*"
	(highlight-regexp
	 (concat "^Function:\\|"
		 "^Macro-function:\\|"
		 "^Its associated name.+?) is\\|"
		 "^The .+'s arguments are:\\|"
		 "^Function documentation:$\\|"
		 "^Its.+\\(is\\|are\\):\\|"
		 "^On.+it was compiled from:$")
	 'hi-green-b)))

    (defadvice slime-show-description (after slime-description-fontify activate)
      "Fontify sections of SLIME Description."
      (slime-description-fontify))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-slime)
    ;;; config-slime.el ends here
    #+end_src
** sly
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-sly.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-sly.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'sly)
    (require 'sly-autoloads)
    #+end_src
*** config
    #+begin_src emacs-lisp
    ;; (add-hook 'emacs-lisp-mode-hook #'sly-mode)
    ;; (add-hook 'eval-expression-minibuffer-setup-hook #'sly--mode)
    ;; (add-hook 'ielm-mode-hook #'sly-mode)
    ;; (add-hook 'lisp-mode-hook #'sly-mode)
    ;; (add-hook 'sly-editing-mode #'sly-mode)
    ;; (add-hook 'sly-mode #'sly-mode)
    ;; (add-hook 'lisp-interaction-mode-hook #'sly-mode)
    ;; (add-hook 'scheme-mode-hook #'sly-mode)
    ;; (add-hook 'comint-mode-hook #'sly-mode)
    (add-hook 'sly-mode-hook
	      (lambda ()
		(unless (sly-connected-p)
		  (save-excursion (sly)))))
    (setq sly-contribs '(sly-fancy
			 sly-fontifying-fu
			 sly-profiler
			 sly-retro
			 sly-scratch))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-sly)
    ;;; config-sly.el ends here
    #+end_src
** paredit
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-paredit.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-paredit.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'paredit)
    (require 'paredit)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'sly-editing-mode #'enable-paredit-mode)
    (add-hook 'sly-mode #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook #'enable-paredit-mode)
    (require 'eldoc)
    (eldoc-add-command
     'paredit-backward-delete
     'paredit-close-round)
    (add-hook 'slime-repl-mode-hook (lambda () (paredit-mode +1)))
    ;; Stop SLIME's REPL from grabbing DEL,
    (defun override-slime-repl-bindings-with-paredit ()
      (define-key slime-repl-mode-map
	(read-kbd-macro paredit-backward-delete-key) nil))
    (add-hook 'slime-repl-mode-hook 'override-slime-repl-bindings-with-paredit)
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-paredit)
    ;;; config-paredit.el ends here
    #+end_src
** telega
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-telega.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-telega.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    (require 'config-all-the-icons)
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'telega)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (customize-set-variable 'telega-server-libs-prefix "/usr")
    (when (string= "berkeley-unix" system-type)
      (customize-set-variable 'telega-server-libs-prefix "/usr/local"))
    (customize-set-variable 'telega-directory (expand-file-name "telega/" +emacs-data-dir))
    (customize-set-variable 'telega-options-plist '(:online t :is-location-visible t))
    (customize-set-variable 'telega-my-location '(:latitude -6.241586 :longitude 106.992416))
    (customize-set-variable 'telega-use-image t)
    (customize-set-variable 'telega-voip-allow-p2p t)
    (customize-set-variable 'telega-appindicator-use-label t)
    (customize-set-variable 'telega-active-locations-show-avatars t)
    (customize-set-variable 'telega-appindicator-icon-colors
			    '((offline "#ffffff" "#000000" nil)
			      (online "#ffffff" "#000000" "#00ff00")
			      (connecting "gray" "white" "white")))

    (add-hook 'telega-load-hook 'telega-notifications-mode)
    ;; not needed with notification
    ;;(add-hook 'telega-load-hook 'telega-mode-line-mode)
    (add-hook 'telega-load-hook 'telega-appindicator-mode)
    (add-hook 'telega-open-file-hook 'telega-edit-file-mode)
    (add-hook 'telega-load-hook 'telega-my-location-mode)
    ;; needs better keybind
    (add-hook 'telega-load-hook
	      (lambda ()
		(define-key global-map (kbd "C-c t T") telega-prefix-map)))
    (require 'telega)
    ;; contrib packages
    ;; org-mode links
    (require 'ol-telega)
    (customize-set-variable 'telega-status-history-logs-dir (expand-file-name "telega/history/" +emacs-data-dir))
    (require 'telega-status-history)
    (add-hook 'telega-load-hook 'global-telega-url-shorten-mode)
    (require 'telega-url-shorten)
    (customize-set-variable 'telega-url-shorten-use-images t)
    (straight-use-package 'language-detection)
    (require 'language-detection)
    (require 'telega-mnz)
    (add-hook 'telega-load-hook 'global-telega-mnz-mode)
    (require 'telega-transient)
    (telega-transient-mode 1)
    (require 'telega-dashboard)
    (add-to-list 'dashboard-items '(telega-chats . 5))
    ;;(require 'telega-stories)
    ;;(telega-stories-mode 1)
    ;;(define-key telega-root-mode-map (kbd "v e") 'telega-view-emacs-stories)
    ;;(add-to-list 'dashboard-items '(telega-stories . 5))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-telega)
    ;;; config-telega.el ends here
    #+end_src
** emms
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-emms.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-emms.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'emms)
    (straight-use-package 'lyrics-fetcher)
    (straight-use-package 'org-emms)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (customize-set-variable 'emms-directory (expand-file-name "emms" +emacs-data-dir))
    (customize-set-variable 'emms-player-mpv-update-metadata t)

    (add-hook 'emms-player-started-hook 'emms-show)
    (require 'emms-setup)
    (require 'emms-history)
    (require 'emms-source-file)
    (require 'emms-source-playlist)
    ;;(require 'emms-librefm-scrobbler)
    (require 'emms-lyrics)
    (require 'config-pass)
    (emms-all)
    (emms-default-players)
    (emms-cache-enable)

    ;; history
    (emms-history-load)
    (setq emms-source-file-default-directory +emms-music-dir
	  emms-lyrics-dir (expand-file-name ".lyrics/" +emms-music-dir)
	  emms-lyrics-display-buffer t
	  emms-random-playlist t
	  emms-repeat-playlist t
	  emms-browser-covers #'emms-browser-cache-thumbnail-async
	  emms-source-playlist-default-format 'm3u
	  emms-playlist-mode-center-when-go t
	  emms-playlist-default-major-mode 'emms-playlist-mode
	  emms-show-format "NP: %s"
	  emms-playlist-buffer-name "*Music*"
	  emms-player-mpv-environment '("PULSnE_PROP_media.role=music")
	  emms-player-mpv-parameters '("--quiet" "--really-quiet" "--no-audio-display" "--force-window=no" "--vo=null"))
    ;;(setq emms-librefm-scrobbler-username (user-login-name))
    ;;(setq emms-librefm-scrobbler-password (password-store-get (concat "libre.fm/" (user-login-name))))

    ;;(when emms-librefm-scrobbler-password
    ;;  (emms-librefm-scrobbler-enable))

    (when (not (file-directory-p emms-lyrics-dir))
      (make-directory emms-lyrics-dir :parents))
    #+end_src
*** Lyrics-fetcher
    #+begin_src emacs-lisp
    ;; lyrics-fetcher
    (setq lyrics-fetcher-lyrics-folder emms-lyrics-dir)
    (lyrics-fetcher-use-backend 'neteasecloud)
    #+end_src
*** Setup player based on executables.
    #+begin_src emacs-lisp
    (setq emms-player-list nil)
    (when (executable-find "vlc")
      (add-to-list 'emms-player-list 'emms-player-vlc)
      (add-to-list 'emms-player-list 'emms-player-vlc-playlist))
    (when (executable-find "mpeg123")
      (add-to-list 'emms-player-list 'emms-player-mpg321))
    (when (executable-find "mplayer")
      (add-to-list 'emms-player-list 'emms-player-mplayer)
      (add-to-list 'emms-player-list 'emms-player-mplayer-playlist))
    (when (executable-find "mpv")
      (add-to-list 'emms-player-list 'emms-player-mpv))
    (when (executable-find "xine")
      (add-to-list 'emms-player-list 'emms-player-xine))
    (when (executable-find "mikmod")
      (add-to-list 'emms-player-list 'emms-player-mikmod))
    #+end_src
*** emms-player-mpd
    #+begin_src emacs-lisp
    (defun +config/emms-set-mpd (&optional name port passwd)
      "Set `emms' to use mpd, use arguments NAME, PORT and PASSWD."
      (interactive)
      (require 'emms-player-mpd)
      (if name
	  (setq emms-player-mpd-server-name name)
	(setq emms-player-mpd-server-name "localhost"))
      (if port
	  (setq emms-player-mpd-server-port port)
	(setq emms-player-mpd-server-port "6600"))
      (if passwd
	  (setq emms-player-mpd-server-password passwd))
      (add-to-list 'emms-info-functions 'emms-info-mpd)
      (add-to-list 'emms-player-list 'emms-player-mpd)
      (require 'emms-volume)
      (setq emms-volume-change-function 'emms-volume-mpd-change))
    #+end_src
*** notification
    #+begin_src emacs-lisp
    (defvar notify-method 'nil
      "Method for sending notifications.")

    ;; choose D-Bus to disseminate messages, if it is running.
    (cond
     ;; test to see if D-Bus notifications are available
     ((if (and (require 'dbus nil t)
	       (dbus-ping :session "org.freedesktop.Notifications"))
	  (progn
	    (setq notify-method 'notify-via-dbus-notifications)
	    (require 'notifications))))
     ;; could use the message system otherwise
     (t (setq notify-method 'notify-via-message)))

    (defun notify-via-notifications (title msg icon)
      "Send notification with TITLE, MSG via `D-Bus'."
      (notifications-notify
       :title title
       :body msg
       :app-icon icon
       :urgency 'low))

    (defun notify-via-messages (title msg)
      "Send notification with TITLE, MSG to message."
      (message "APPOINTMENT: %s" msg))

    (defun emms-notifications-dbus (track-name)
      "Share track name via `D-Bus'."
      (let ((icon "/usr/share/icons/gnome/24x24/categories/applications-multimedia.png"))
	(notify-via-notifications "EMMS is now playing:" track-name icon)))

    (defun emms-notifications-message (track-name)
      "Share track name via Emacs minibuffer."
      (message "EMMS is now playing: %s" track-name))

    (setq emms-player-next-function 'emms-notify-and-next)

    (defun emms-notify-and-next ()
      "Send a notification of track and start next."
      (emms-next-noerror)
      (let ((track-name (emms-track-description (emms-playlist-current-selected-track))))
	(cond
	 ((eq notify-method 'notify-via-dbus-notifications)
	  (emms-notifications-dbus track-name))
	 (t (emms-notifications-message track-name)))))
    #+end_src
*** keybind
**** general
     from doom:
     #+begin_src emacs-lisp
     (with-eval-after-load 'config-general
       (require 'general)
       (general-define-key
	:keymaps 'emms-playlist-mode-map
	:states '(normal visual)
	"l" #'emms-toggle-repeat-playlist
	"p" #'emms-insert-playlist
	"i" #'emms-insert-file
	"t" #'emms-toggle-repeat-track
	"s" #'emms-playlist-save
	"m" #'emms-shuffle))
     #+end_src
*** evil
    #+begin_src emacs-lisp
    (with-eval-after-load 'evil-collection
      (evil-collection-emms-setup))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-emms)
    ;;; config-emms.el ends here
    #+end_src
** w3m
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-w3m.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-w3m.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'w3m)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (when (executable-find "w3m")
      (require 'w3m)
      (require 'w3m-bookmark)
      ;;(setq browse-url-browser-function 'w3m-goto-url-new-session)
      (setq w3m-home-page "http://www.google.com")
      (setq w3m-use-cookies t)
      (setq w3m-use-header-line-title t)
      (setq w3m-cookie-accept-bad-cookies t)
      (setq w3m-view-this-url-new-session-in-background t)
      (setq w3m-new-session-in-background t)
      (setq w3m-session-time-format "%Y-%m-%d %A %H:%M")
      (setq w3m-favicon-use-cache-file t)
      (setq w3m-show-graphic-icons-in-mode-line t)
      (setq w3m-keep-arrived-urls 50000)
      (setq w3m-keep-cache-size 1000)
      (setq w3m-edit-function (quote find-file-other-window))
      (setq w3m-session-automatic-save t)
      (setq w3m-session-deleted-save nil)
      (setq w3m-default-display-inline-images nil)
      (setq w3m-toggle-inline-images-permanently t)
      (setq w3m-enable-google-feeling-lucky nil)
      (setq w3m-use-filter t)
      (setq w3m-filter-google-separator "")
      (setq w3m-fb-mode t)
      (setq w3m-session-load-crashed-sessions t)
      (setq w3m-bookmark-file-coding-system 'utf-8)
      (setq w3m-file-coding-system 'utf-8)
      (setq w3m-file-name-coding-system 'utf-8)
      (setq w3m-coding-system 'utf-8)
      (setq w3m-default-coding-system 'utf-8)
      (w3m-fb-mode 1))
    #+end_src
*** directories
    #+begin_src emacs-lisp
    (setq w3m-default-save-directory (getenv "XDG_DOWNLOAD_DIR"))
    (setq w3m-bookmark-file (expand-file-name "w3m/bookmarks.html" +emacs-data-dir))
    (setq w3m-cookie-file (expand-file-name "w3m/cookies" +emacs-data-dir))
    (setq w3m-session-file (expand-file-name "w3m/sessions" +emacs-data-dir))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-w3m)
    ;;; config-w3m.el ends here
    #+end_src
** pdf-tools
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-pdf-tools.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-pdf-tools.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'pdf-tools)
    (pdf-loader-install)
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-pdf-tools)
    ;;; config-pdf-tools.el ends here
    #+end_src
** gist
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-gist.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-gist.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'gist)
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-gist)
    ;;; config-gist.el ends here
    #+end_src
** ripgrep
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-ripgrep.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-ripgrep.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'ripgrep)
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-ripgrep)
    ;;; config-ripgrep.el ends here
    #+end_src
** restart-emacs
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-restart-emacs.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-restart-emacs.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'restart-emacs)
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-restart-emacs)
    ;;; config-restart-emacs.el ends here
    #+end_src
** devdocs
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-devdocs.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-devdocs.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'devdocs)
    #+end_src
*** variables
    #+begin_src emacs-lisp
    (customize-set-variable 'devdocs-data-dir (expand-file-name "devdocs/" +emacs-data-dir))
    (unless (file-directory-p devdocs-data-dir)
      (make-directory devdocs-data-dir t))
    #+end_src
*** config
    #+begin_src emacs-lisp
    (require 'devdocs)
    #+end_src
*** keybinding
    #+begin_src emacs-lisp
    (with-eval-after-load 'config-general
      (require 'general)
      (general-define-key
       :keymaps 'devdocs-mode-map
       :states '(normal visual emacs)
       "H" #'devdocs-go-back
       "L" #'devdocs-go-forward
       "o" #'devdocs-lookup
       "[" #'devdocs-previous-page
       "]" #'devdocs-next-page)
      (+config/leader-def
	:states '(normal visual)
	"ad" '(:ignore t :which-key "DevDocs")
	"adl" #'devdocs-lookup
	"adi" #'devdocs-install))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-devdocs)
    ;;; config-devdocs.el ends here
    #+end_src
** hugo
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-hugo.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-hugo.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'ox-hugo)
    #+end_src
*** variables
    #+begin_src emacs-lisp
    (defvar +config/blog-dir (expand-file-name "blog" org-directory)
      "Blog directory, relative to `org-directory'.")
    (defvar +config/ox-hugo-en-file (expand-file-name "content-org/posts.en.org" +config/blog-dir)
      "Blog file for `hugo'.")
    (defvar +config/ox-hugo-id-file (expand-file-name "content-org/posts.id.org" +config/blog-dir)
      "Blog file for `hugo'.")
    (defvar +config/ox-hugo-heading "Blog Ideas"
      "Heading for org-capture inside `+config/ox-hugo-file'.")
    #+end_src
*** config
    #+begin_src emacs-lisp
    (require 'ox)
    (require 'ox-hugo)
    #+end_src
*** capture template
    #+begin_src emacs-lisp
    ;; Populates only the EXPORT_FILE_NAME property in the inserted heading.
    (with-eval-after-load 'org-capture
      (defun org-hugo-new-subtree-post-capture-template ()
	"Returns `org-capture' template string for new Hugo post.
								    See `org-capture-templates' for more information."
	(let* ((title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
	       (fname (org-hugo-slug title)))
	  (mapconcat #'identity
		     `(
		       ,(concat "* TODO " title)
		       ":PROPERTIES:"
		       ,(concat ":EXPORT_FILE_NAME: " fname)
		       ":END:"
		       "%?\n")          ;Place the cursor here finally
		     "\n")))

      (setq org-capture-templates
	    (append org-capture-templates
		    `(("h" "(h)ugo")
		      ("he"  "Hugo (e)nglish post"               ;`org-capture' binding + h
		       entry
		       ;; It is assumed that below file is present in `org-directory'
		       ;; and that it has a "Blog Ideas" heading. It can even be a
		       ;; symlink pointing to the actual location of all-posts.org!
		       (file+olp ,+config/ox-hugo-en-file ,+config/ox-hugo-heading)
		       (function org-hugo-new-subtree-post-capture-template))
		      ("hi"  "Hugo (i)ndonesian post"               ;`org-capture' binding + h
		       entry
		       ;; It is assumed that below file is present in `org-directory'
		       ;; and that it has a "Blog Ideas" heading. It can even be a
		       ;; symlink pointing to the actual location of all-posts.org!
		       (file+olp ,+config/ox-hugo-id-file ,+config/ox-hugo-heading)
		       (function org-hugo-new-subtree-post-capture-template))))))
    #+end_src
*** start hugo server function
    #+begin_src emacs-lisp
    (defun +config/start-hugo-server (args)
      "Start hugo server in `+config/blog-dir'."
      (interactive (list (transient-args '+config/transient-hugo-server)))
      (if (not (executable-find "hugo"))
	  (message "hugo executable not found")
	(let ((default-directory +config/blog-dir)
	      (command "hugo server"))
	  (async-shell-command (mapconcat #'identity `(,command ,@args) " ") "*hugo*" "*hugo-error*"))))
    #+end_src
*** transient define
    #+begin_src emacs-lisp
    (require 'transient)
    (transient-define-prefix +config/transient-hugo-server ()
      "Run hugo server with `transient'."
      :man-page "hugo-server"
      ["Options"
       ("-D" "Build drafts" "--buildDrafts")
       ("-E" "Build expired" "--buildExpired")
       ("-F" "Build future" "--buildFuture")
       ("d" "Debug" "--debug")
       ("B" "Disable build errors on browser" "--disableBrowserError")
       ("c" "Clean destination dir" "--cleanDestinationDir")
       ("e" "Enable Git info" "--enableGitInfo")
       ("F" "enable full re-renders on changes" "--disableFastRender")
       ("f" "Force sync static files" "--forceSyncStatic")
       ("g" "enable to run some cleanup tasks" "--gc")
       ("m" "Minify any supported output format" "--minify")
       ("C" "No chmod" "--noChmod")
       ("T" "Don't sync modification time of files" "--noTimes")
       ("I" "Print missing translation" "--printI18nWarnings")
       ("M" "Print memory usage" "--printMemoryUsage")
       ("P" "Print warning on duplicate target path" "--printPathWarnings")
       ("q" "Quiet" "--quiet")
       ("v" "Verbose" "--verbose")
       ("w" "Watch filesystem for changes" "--watch")]
      ["Action"
       ("s" "hugo server" +config/start-hugo-server)])
    #+end_src
*** general keybinding
    #+begin_src emacs-lisp
    (with-eval-after-load 'config-general
      (+config/leader-def
	:states '(normal visual)
	"H" '(:ignore t :whick-key "Hugo prefix")
	"Hs" '+config/transient-hugo-server))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-hugo)
    ;;; config-hugo.el ends here
    #+end_src
** guix
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-guix.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-guix.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'guix)
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-guix)
    ;;; config-guix.el ends here
    #+end_src
* email
** builtins
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/builtin-email.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-builtin-email.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** footer
    #+begin_src emacs-lisp
    (provide 'builtin-email)
    ;;; builtin-email.el ends here
    #+end_src
** notmuch
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-notmuch.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-notmuch.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'notmuch)
    (straight-use-package 'ol-notmuch)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (customize-set-variable 'notmuch-init-file (expand-file-name "notmuch-config" +emacs-data-dir))
    (customize-set-variable 'notmuch-search-oldest-first nil)
    (if (executable-find "gpg2")
	(customize-set-variable 'notmuch-crypto-gpg-program "gpg2")
      (customize-set-variable 'notmuch-crypto-gpg-program "gpg"))
    (global-set-key (kbd "C-c M") 'notmuch) ;; conflict with consult
    (when (featurep 'consult)
      (straight-use-package 'consult-notmuch)
      (require 'consult-notmuch))
    (unless (featurep 'transient)
      (straight-use-package 'transient))
    (require 'transient)
    (require 'notmuch)
    (with-eval-after-load 'config-general
      (progn
	(require 'general)
	(+config/leader-def
	  :states '(normal visual)
	  "mm" 'notmuch)))
    #+end_src
    This is the default saved-searches, for reference.
    #+begin_src emacs-lisp :tangle no
    (setq notmuch-saved-searches
	  '((:name "inbox" :query "tag:inbox" :key "i")
	    (:name "unread" :query "tag:unread" :key "u")
	    (:name "flagged" :query "tag:flagged" :key "f") ;starred in gmail
	    (:name "sent" :query "tag:sent" :key "t")
	    (:name "drafts" :query "tag:draft" :key "d")
	    (:name "all mail" :query "*" :key "a")))
    #+end_src
    Since I've used =afew= to modify /tags/ based on the accounts /maildir/ directories
    #+begin_src emacs-lisp
    (setq notmuch-saved-searches
	  '((:name "Today"
		   :query "date:today AND NOT tag:spam AND NOT tag:bulk"
		   :key "T"
		   :search-type 'tree
		   :sort-order 'newest-first)
	    (:name "This Week"
		   :query "date:weeks AND NOT tag:spam AND NOT tag:bulk"
		   :key "W"
		   :search-type 'tree
		   :sort-order 'newest-first)
	    (:name "This Month"
		   :query "date:months AND NOT tag:spam AND NOT tag:bulk"
		   :key "M"
		   :search-type 'tree
		   :sort-order 'newest-first)
	    (:name "flagged"
		   :query "tag:flagged AND NOT tag:spam AND NOT tag:bulk"
		   :key "f"
		   :search-type 'tree
		   :sort-order 'newest-first)
	    (:name "inbox" :query "tag:inbox" :key "i")
	    (:name "unread" :query "tag:unread" :key "u")
	    (:name "spam" :query "tag:spam")
	    (:name "gmail/inbox" :query "tag:gmail/inbox")
	    (:name "gmail/sent" :query "tag:gmail/sent")
	    (:name "gmail/draft" :query "tag:gmail/draft")
	    (:name "gmail/archive" :query "tag:gmail/archive")
	    (:name "gmail/spam" :query "tag:gmail/spam")
	    (:name "yahoo/inbox" :query "tag:yahoo/inbox")
	    (:name "yahoo/sent" :query "tag:yahoo/sent")
	    (:name "yahoo/draft" :query "tag:yahoo/draft")
	    (:name "yahoo/archive" :query "tag:yahoo/archive")
	    (:name "yahoo/spam" :query "tag:yahoo/spam")
	    (:name "hotmail/inbox" :query "tag:hotmail/inbox")
	    (:name "hotmail/sent" :query "tag:hotmail/sent")
	    (:name "hotmail/draft" :query "tag:hotmail/draft")
	    (:name "hotmail/archive" :query "tag:hotmail/archive")
	    (:name "hotmail/spam" :query "tag:hotmail/spam")
	    (:name "ymail/inbox" :query "tag:ymail/inbox")
	    (:name "ymail/sent" :query "tag:ymail/sent")
	    (:name "ymail/draft" :query "tag:ymail/draft")
	    (:name "ymail/archive" :query "tag:ymail/archive")
	    (:name "ymail/spam" :query "tag:ymail/spam")))
    #+end_src
    =+my/offlineimap-poll= function
    #+begin_src emacs-lisp
    (defun +my/offlineimap-poll (&optional args)
      "Poll offlineimap with ARGS if provided."
      (setq-local output-buffer "*offlineimap*"
		  error-buffer "*offlineimap-error*"
		  command "offlineimap")
      (if args
	  (async-shell-command (mapconcat #'identity `(,command ,@args) " ") output-buffer error-buffer))
      (async-shell-command (mapconcat #'identity `(,command ,@args) " ") output-buffer error-buffer))
    #+end_src
    =+my/interactive-offlineimap-poll=
    #+begin_src emacs-lisp
    (defun +my/interactive-offlineimap-poll (&optional args)
      "Runs offlineimap interactively.
    Should be run with transient."
      (interactive
       (list (transient-args '+my/offlineimap-transient)))
      (let ((command "offlineimap")
	    (output-buffer "*offlineimap*")
	    (error-buffer "*offlineimap-error*"))
	(if args
	    (async-shell-command (mapconcat #'identity `(,command ,@args) " ") output-buffer error-buffer)
	  (async-shell-command (mapconcat #'identity `(,command ,@args) " ") output-buffer error-buffer))))
    #+end_src
    =+my/offlineimap-transient=
    #+begin_src emacs-lisp
    (require 'transient)

    (transient-define-prefix +my/offlineimap-transient ()
      "Offlineimap transient account chooser"
      :man-page "offlineimap"
      :incompatible '(("-a gmail" "-a yahoo" "-a ymail" "-a hotmail"))
      ["Account"
       ("g" "Gmail" "-a gmail")
       ("y" "Yahoo" "-a yahoo")
       ("Y" "Ymail" "-a ymail")
       ("h" "Hotmail" "-a hotmail")]
      ["Options"
       ("-d" "dry-run" "--dry-run")
       ("-i" "info" "--info")
       ("-1" "single-thread" "-1")
       ("-s" "syslog" "-s")
       ("-q" "quick" "-q")]
      ["Actions"
       ("p" "poll offlineimap" +my/interactive-offlineimap-poll)])

    (when (executable-find "offlineimap")
      (define-key notmuch-common-keymap [remap notmuch-poll-and-refresh-this-buffer] #'+my/offlineimap-transient))
    #+end_src
*** mbsync
    #+begin_src emacs-lisp
    (defun +my/mbsync-poll ()
      (interactive)
      (async-shell-command "notmuch new" "*notmuch-poll*" "*notmuch-poll-error*"))
    (when (executable-find "mbsync")
      (define-key notmuch-common-keymap [remap notmuch-poll-and-refresh-this-buffer] #'+my/mbsync-poll))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-notmuch)
    ;;; config-notmuch.el ends here
    #+end_src
** gnus-alias
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-gnus-alias.el" user-emacs-directory)
   :END:
   #+begin_src emacs-lisp
   ;;; config-gnus-alias.el --- Summary -*- lexical-binding: t -*-
   ;;; Commentary:
   ;; This file is auto-generated from `config.org'
   ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
   ;;; Code:
   #+end_src
   #+begin_src emacs-lisp
   (straight-use-package 'gnus-alias)
   (add-hook 'message-setup-hook
	     (lambda ()
	       (gnus-alias-determine-identity)
	       (define-key message-mode-map (kbd "C-c f")
		 (lambda ()
		   (interactive)
		   (message-remove-header "Fcc")
		   (message-remove-header "Organization")
		   (gnus-alias-select-identity)
		   (when (featurep 'notmuch)
		     (notmuch-fcc-header-setup))))))
   #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-gnus-alias)
    ;;; config-gnus-alias.el ends here
    #+end_src
* shells
** builtins
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/builtin-shell.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-builtin-shell.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;; Code:
    #+end_src
*** footer
    #+begin_src emacs-lisp
    (provide 'builtin-shell)
    ;;; builtin-shell.el ends here
    #+end_src

** vterm
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-vterm.el" user-emacs-directory)
   :END:
   #+begin_src emacs-lisp
   ;;; config-vterm.el --- Summary -*- lexical-binding: t -*-
   ;;; Commentary:
   ;; This file is auto-generated from `config.org'
   ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
   ;;; Code:
   #+end_src
   #+begin_src emacs-lisp
   (if (or (getenv "GUIX_LOCPATH")
           (string= "exwm" (getenv "DESKTOP_SESSION")))
       (straight-use-package '(vterm :type built-in))
     (straight-use-package 'vterm))
   (require 'vterm)
   (global-set-key (kbd "C-c t t") 'vterm)
   (setq vterm-max-scrollback 5000)
   (add-hook 'vterm-mode-hook (lambda () (setq confirm-kill-processes nil
                                               hscroll-margin 0)))
   (setq vterm-kill-buffer-on-exit t)
   #+end_src
*** general
    #+begin_src emacs-lisp
    (with-eval-after-load 'config-general
      (progn
	(require 'general)
	(+config/leader-def
	  :states '(normal visual)
	  "tt" 'vterm)))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-vterm)
    ;;; config-vterm.el ends here
    #+end_src
* completion
** vertico
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-vertico.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-vertico.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package '(vertico :files (:defaults "extensions/*")
				    :includes (vertico-indexed
					       vertico-flat
					       vertico-grid
					       vertico-mouse
					       vertico-quick
					       vertico-buffer
					       vertico-repeat
					       vertico-reverse
					       vertico-directory
					       vertico-multiform
					       vertico-unobtrusive
					       )))
    #+end_src
*** config
    #+begin_src emacs-lisp
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
    (setq tab-always-indent 'complete)
    (customize-set-variable 'vertico-cycle t)

    (require 'vertico)
    (vertico-mode)
    #+end_src
*** completion-in-region
    #+begin_src emacs-lisp
    ;; Use `consult-completion-in-region' if Vertico is enabled.
    ;; Otherwise use the default `completion--in-region' function.
    (setq completion-in-region-function
	  (lambda (&rest args)
	    (apply (if vertico-mode
		       #'consult-completion-in-region
		     #'completion--in-region)
		   args)))
    #+end_src
*** menubar
    #+begin_src emacs-lisp
    ;; tmm-menubar
    (global-set-key [f10] #'tmm-menubar)
    (advice-add #'tmm-add-prompt :after #'minibuffer-hide-completions)
    #+end_src
*** ffap-menu
    #+begin_src emacs-lisp
    ;; ffap-menu
    (advice-add #'ffap-menu-ask :around (lambda (&rest args)
					  (cl-letf (((symbol-function #'minibuffer-completion-help)
						     #'ignore))
					    (apply args))))
    #+end_src
*** prefix
    #+begin_src emacs-lisp
    ;; prefix
    (advice-add #'vertico--format-candidate :around
		(lambda (orig cand prefix suffix index _start)
		  (setq cand (funcall orig cand prefix suffix index _start))
		  (concat
		   (if (= vertico--index index)
		       (propertize "» " 'face 'vertico-current)
		     "  ")
		   cand)))
    ;; don't let vertico resize the minibuffer
    (setq vertico-resize nil)
    ;; increase the number of candidates to show
    (setq vertico-count 15)
    #+end_src
*** vertico-multiform
    #+begin_src emacs-lisp
    (require 'vertico-multiform)
    (setq vertico-multiform-commands
	  '((consult-imenu buffer indexed)
	    (consult-imenu-multi buffer indexed)))

    (setq vertico-multiform-categories
	  '((symbol (vertico-sort-function . vertico-sort-alpha))
	    (file (vertico-sort-function . sort-directories-first))))

    (setq vertico-multiform-categories
	  '((buffer flat (vertico-cycle . t))))

    (defun sort-directories-first (files)
      (setq files (vertico-sort-history-length-alpha files))
      (nconc (seq-filter (lambda (x) (string-suffix-p "/" x)) files)
	     (seq-remove (lambda (x) (string-suffix-p "/" x)) files)))
    #+end_src
*** vertico-repeat
    #+begin_src emacs-lisp
    (global-set-key (kbd "<C-S-iso-lefttab>") #'vertico-repeat)
    (add-hook 'minibuffer-setup-hook #'vertico-repeat-save)
    #+end_src
*** vertico-directory
    #+begin_src emacs-lisp
    (require 'vertico-directory)
    (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)
    (add-hook 'minibuffer-setup-hook #'vertico-repeat-save)
    (define-key vertico-map (kbd "DEL") 'vertico-directory-delete-char)
    ;;(define-key vertico-map (kbd "M-DEL") 'vertico-directory-delete-char)
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-vertico)
    ;;; config-vertico.el ends here
    #+end_src
** orderless
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-orderless.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-orderless.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'orderless)
    (require 'orderless)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (setq completion-styles '(basic partial-completion orderless)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles basic partial-completion))))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-orderless)
    ;;; config-orderless.el ends here
    #+end_src
** marginalia
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-marginalia.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-marginalia.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'marginalia)
    (when (featurep 'config-all-the-icons)
      (straight-use-package 'all-the-icons-completion))
    (require 'marginalia)
    #+end_src
*** keybind
    #+begin_src emacs-lisp
    (define-key minibuffer-local-map (kbd "M-A") 'marginalia-cycle)
    (marginalia-mode 1)
    #+end_src
*** all-the-icons integration
    #+begin_src emacs-lisp
    (when (featurep 'config-all-the-icons)
      (all-the-icons-completion-mode)
      (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-marginalia)
    ;;; config-marginalia.el ends here
    #+end_src
** consult
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-consult.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-consult.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'consult)
    (straight-use-package 'consult-dir)
    #+end_src
*** hooks
    #+begin_src emacs-lisp
    (require 'consult)
    (add-hook 'completion-list-mode-hook #'consult-preview-at-point-mode)
    (advice-add #'register-preview :override #'consult-register-window)
    ;;(advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
    #+end_src
*** variable
    #+begin_src emacs-lisp
    (setq register-preview-delay 0.5
	  register-preview-function #'consult-register-format)
    (setq xref-show-xrefs-function #'consult-xref
	  xref-show-definitions-function #'consult-xref)
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file
     :preview-key (kbd "M-."))
    (setq consult-narrow-key "<") ;; (kbd "C-+")
    ;; remap
    #+end_src
*** keybindings
**** global remap
     #+begin_src emacs-lisp
     (global-set-key [remap apropos-command] #'consult-apropos)
     (global-set-key [remap bookmark-jump] #'consult-bookmark)
     (global-set-key [remap goto-line] #'consult-goto-line)
     (global-set-key [remap imenu] #'consult-imenu)
     (global-set-key [remap locate] #'consult-locate)
     (global-set-key [remap load-theme] #'consult-theme)
     (global-set-key [remap man] #'consult-man)
     (global-set-key [remap recentf-open-files] #'consult-recent-file)
     (global-set-key [remap repeat-complex-command] #'consult-complex-command)
     (global-set-key [remap project-switch-to-buffer] #'consult-project-buffer)
     (global-set-key [remap switch-to-buffer] #'consult-buffer)
     (global-set-key [remap switch-to-buffer-other-window] #'consult-buffer-other-window)
     (global-set-key [remap switch-to-buffer-other-frame] #'consult-buffer-other-frame)
     (global-set-key [remap yank-pop] #'consult-yank-pop)
     #+end_src
**** isearch-mode-map
     #+begin_src emacs-lisp
     (define-key isearch-mode-map [remap isearch-edit-string] #'consult-isearch-history)
     ;; Isearch integration
     (global-set-key (kbd "M-s e") 'consult-isearch-history)
     (define-key isearch-mode-map (kbd "M-s l") #'consult-line) ;; needed by consult-line to detect isearch
     (define-key isearch-mode-map (kbd "M-s L") #'consult-line-multi) ;; needed by consult-line to detect isearch
     #+end_src
**** global
     #+begin_src emacs-lisp
     (global-set-key (kbd "C-c h") 'consult-history)
     (global-set-key (kbd "C-c m") 'consult-mode-command)
     (global-set-key (kbd "C-c k") 'consult-kmacro)
     ;; Custom M-# bindings for fast register access
     (global-set-key (kbd "M-#") 'consult-register-load)
     (global-set-key (kbd "M-'") 'consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
     (global-set-key (kbd "C-M-#") 'consult-register)
     ;; M-g bindings (goto-map)
     (global-set-key (kbd "M-g e") 'consult-compile-error)
     (global-set-key (kbd "M-g o") 'consult-outline)               ;; Alternative: consult-org-heading
     ;;(global-set-key (kbd "M-g m") 'consult-mark) ;;conflict with telega
     (global-set-key (kbd "M-g k") 'consult-global-mark)
     ;;(global-set-key (kbd "M-g i") 'consult-imenu) ;; conflict with telega
     (global-set-key (kbd "M-g I") 'consult-imenu-multi)
     ;; M-s bindings (search-map)
     (global-set-key (kbd "M-s d") 'consult-find)
     (global-set-key (kbd "M-s D") 'consult-locate)
     (global-set-key (kbd "M-s g") 'consult-grep)
     (global-set-key (kbd "M-s G") 'consult-git-grep)
     (global-set-key (kbd "M-s r") 'consult-ripgrep)
     (global-set-key (kbd "M-s l") 'consult-line)
     (global-set-key (kbd "M-s L") 'consult-line-multi)
     (global-set-key (kbd "M-s m") 'consult-multi-occur)
     (global-set-key (kbd "M-s k") 'consult-keep-lines)
     (global-set-key (kbd "M-s u") 'consult-focus-lines)
     #+end_src
**** flymake/flycheck integration
     #+begin_src emacs-lisp
     (when (featurep 'flymake)
       (global-set-key (kbd "M-g f") 'consult-flymake))               ;; Alternative: consult-flycheck
     (when (featurep 'flycheck)
       (global-set-key (kbd "M-g f") 'consult-flycheck))
     #+end_src
**** consult-dir
     #+begin_src emacs-lisp
     (global-set-key [remap list-directory] #'consult-dir)
     (cond ((featurep 'vertico)
	    (define-key vertico-map (kbd "C-x C-d") 'consult-dir)
	    (define-key vertico-map (kbd "C-x C-j") 'consult-dir-jump-file))
	   ((featurep 'selectrum)
	    (define-key selectrum-minibuffer--map (kbd "C-x C-d") 'consult-dir)
	    (define-key selectrum-minibuffer-map (kbd "C-x C-j") 'consult-dir-jump-file)))
     (define-key minibuffer-local-completion-map (kbd "C-x C-d") 'consult-dir)
     (define-key minibuffer-local-completion-map (kbd "C-x C-j") 'consult-dir-jump-file)
     #+end_src
**** project
     #+begin_src emacs-lisp
     (cond
      ((featurep 'projectile)
       (autoload 'projectile-project-root "projectile")
       (setq consult-project-root-function #'projectile-project-root))
      ((featurep 'project)
       (setq consult-project-root-function #'consult--project-root-default-function))
      ((featurep 'vc)
       (setq consult-project-root-function #'vc-root-dir)))
     #+end_src
**** general
***** consult-register
      #+begin_src emacs-lisp
      (with-eval-after-load 'config-general
	(progn
	  (require 'general)
	  (+config/leader-def
	    :states '(normal visual)
	    "/ry" 'consult-register-store
	    "/rp" 'consult-register-load
	    "/rr" 'consult-register)))
      #+end_src
***** consult-bookmark
      #+begin_src emacs-lisp
      (with-eval-after-load 'config-general
	(progn
	  (require 'general)
	  (+config/leader-def
	    :states '(normal visual)
	    "/bl" 'consult-bookmark)))
      #+end_src
***** consult-recent-file
      #+begin_src emacs-lisp
      (with-eval-after-load 'config-general
	(progn
	  (require 'general)
	  (+config/leader-def
	    :states '(normal visual)
	    "fF" 'consult-recent-file)))
      #+end_src
***** consult-buffer
      #+begin_src emacs-lisp
      (with-eval-after-load 'config-general
	(progn
	  (require 'general)
	  (+config/leader-def
	    :states '(normal visual)
	    "bb" 'consult-buffer)))
      #+end_src
***** consult-imenu
      #+begin_src emacs-lisp
      (with-eval-after-load 'config-general
	(progn
	  (require 'general)
	  (+config/leader-def
	    :states '(normal visual)
	    "si" 'consult-imenu
	    "sI" 'consult-imenu-multi)))
      #+end_src
***** consult-line
      #+begin_src emacs-lisp
      (with-eval-after-load 'config-general
	(progn
	  (require 'general)
	  (+config/leader-def
	    :states '(normal visual)
	    "/l" 'consult-line
	    "/L" 'consult-line-multi)))
      #+end_src
***** consult-outline
      #+begin_src emacs-lisp
      (with-eval-after-load 'config-general
	(progn
	  (require 'general)
	  (+config/leader-def
	    :states '(normal visual)
	    "/o" 'consult-outline)))
      #+end_src
***** consult-global-mark
      #+begin_src emacs-lisp
      (with-eval-after-load 'config-general
	(progn
	  (require 'general)
	  (+config/leader-def
	    :states '(normal visual)
	    "/bg" 'consult-global-mark)))
      #+end_src
***** consult-find
      #+begin_src emacs-lisp
      (with-eval-after-load 'config-general
	(progn
	  (require 'general)
	  (+config/leader-def
	    :states '(normal visual)
	    "sf" 'consult-find)))
      #+end_src
***** consult-locate
      #+begin_src emacs-lisp
      (with-eval-after-load 'config-general
	(progn
	  (require 'general)
	  (+config/leader-def
	    :states '(normal visual)
	    "sl" 'consult-locate)))
      #+end_src
***** consult-grep
      #+begin_src emacs-lisp
      (with-eval-after-load 'config-general
	(progn
	  (require 'general)
	  (+config/leader-def
	    :states '(normal visual)
	    "sg" 'consult-grep)))
      #+end_src
***** consult-git-grep
      #+begin_src emacs-lisp
      (with-eval-after-load 'config-general
	(progn
	  (require 'general)
	  (+config/leader-def
	    :states '(normal visual)
	    "sG" 'consult-git-grep)))
      #+end_src
***** consult-ripgrep
      #+begin_src emacs-lisp
      (with-eval-after-load 'config-general
	(progn
	  (require 'general)
	  (+config/leader-def
	    :states '(normal visual)
	    "sr" 'consult-ripgrep)))
      #+end_src
***** consult-multi-occur
      #+begin_src emacs-lisp
      (with-eval-after-load 'config-general
	(progn
	  (require 'general)
	  (+config/leader-def
	    :states '(normal visual)
	    "sm" 'consult-multi-occur)))
      #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-consult)
    ;;; config-consult.el ends here
    #+end_src
** embark
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-embark.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-embark.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'embark)
    (when (featurep 'consult)
      (straight-use-package 'embark-consult))
    (require 'embark)
    #+end_src
*** keybind
    #+begin_src emacs-lisp
    (global-set-key [remap describe-bindings] #'embark-bindings)
    (global-set-key (kbd "C-c C-.") 'embark-act)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (setq prefix-help-command #'embark-prefix-help-command)
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none))))
    #+end_src
*** consult integration
    #+begin_src emacs-lisp
    (when (featurep 'consult)
      (require 'embark-consult)
      (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode))
    #+end_src
*** which-key integration
    #+begin_src emacs-lisp
    (when (featurep 'which-key)
      (setq which-key-use-C-h-commands nil
	    prefix-help-command #'embark-prefix-help-command))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-embark)
    ;;; config-embark.el ends here
    #+end_src
** corfu
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-corfu.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-corfu.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package '(corfu :files (:defaults "extensions/*")
				  :includes (corfu-history
					     corfu-indexed
					     corfu-info
					     corfu-quick)))
    (require 'corfu)
    #+end_src
*** variable
    #+begin_src emacs-lisp
    ;;(customize-set-variable 'corfu-cycle t)
    (customize-set-variable 'corfu-auto t)
    ;;(customize-set-variable 'corfu-preselect-first t)
    (customize-set-variable 'corfu-quit-no-match 'separator)
    ;;(customize-set-variable 'corfu-separator ?\s)
    (setq completion-cycle-threshold 3
	  tab-always-indent 'complete)

    (defun +corfu-enable-in-minibuffer ()
      "Enable Corfu in the minibuffer if `completion-at-point' is bound."
      (when (where-is-internal #'completion-at-point (list (current-local-map)))
	;; (setq-local corfu-auto nil) Enable/disable auto completion
	(corfu-mode 1)))
    (add-hook 'minibuffer-setup-hook #'+corfu-enable-in-minibuffer)

    (add-hook 'eshell-mode-hook
	      (lambda ()
		(setq-local corfu-auto nil)
		(corfu-mode)))
    #+end_src
*** keybind
    #+begin_src emacs-lisp
    (define-key corfu-map (kbd "TAB") 'corfu-next)
    (define-key corfu-map (kbd "S-TAB") 'corfu-previous)

    (defun +corfu-beginning-of-prompt ()
      "Move to beginning of completion input."
      (interactive)
      (corfu--goto -1)
      (goto-char (car completion-in-region--data)))

    (defun +corfu-end-of-prompt ()
      "Move to end of completion input."
      (interactive)
      (corfu--goto -1)
      (goto-char (cadr completion-in-region--data)))

    (define-key corfu-map [remap move-beginning-of-line] #'+corfu-beginning-of-prompt)
    (define-key corfu-map [remap move-end-of-line] #'+corfu-end-of-prompt)

    (global-corfu-mode)
    #+end_src
*** all-the-icons integration
    #+begin_src emacs-lisp
    (when (featurep' config-all-the-icons)
      (straight-use-package 'kind-icon)
      (require 'kind-icon)
      (customize-set-variable 'kind-icon-default-face 'corfu-default)
      (add-hook 'my-completion-ui-mode-hook
		(lambda ()
		  (setq completion-in-region-function
			(kind-icon-enhance-completion
			 completion-in-region-function)))))
    #+end_src
*** corfu-doc
    #+begin_src emacs-lisp
    (straight-use-package '(corfu-doc
			    :type git
			    :host github
			    :repo "galeo/corfu-doc"))
    (add-hook 'corfu-mode-hook #'corfu-doc-mode)
    (require 'corfu-history)
    (require 'savehist)
    (add-to-list 'savehist-additional-variables 'corfu-history)
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-corfu)
    ;;; config-corfu.el ends here
    #+end_src
** cape
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-cape.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-cape.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'cape)
    #+end_src
*** init
    #+begin_src emacs-lisp
    (require 'cape)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    ;; (add-to-list 'completion-at-point-functions #'cape-history)
    ;; (add-to-list 'completion-at-point-functions #'cape-keyword)
    ;; (add-to-list 'completion-at-point-functions #'cape-tex)
    ;; (add-to-list 'completion-at-point-functions #'cape-sgml)
    ;; (add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;; (add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;; (add-to-list 'completion-at-point-functions #'cape-ispell)
    ;; (add-to-list 'completion-at-point-functions #'cape-dict)
    ;; (add-to-list 'completion-at-point-functions #'cape-symbol)
    ;; (add-to-list 'completion-at-point-functions #'cape-line)
    #+end_src
*** keybinding
    #+begin_src emacs-lisp
    (global-set-key (kbd "C-S-c p C-<return>") 'completion-at-point)
    (global-set-key (kbd "C-S-c p t") 'complete-tag)
    (global-set-key (kbd "C-S-c p d") 'cape-dabbrev)
    (global-set-key (kbd "C-S-c p h") 'cape-history)
    (global-set-key (kbd "C-S-c p f") 'cape-file)
    (global-set-key (kbd "C-S-c p k") 'cape-keyword)
    (global-set-key (kbd "C-S-c p s") 'cape-symbol)
    (global-set-key (kbd "C-S-c p a") 'cape-abbrev)
    (global-set-key (kbd "C-S-c p i") 'cape-ispell)
    (global-set-key (kbd "C-S-c p l") 'cape-line)
    (global-set-key (kbd "C-S-c p w") 'cape-dict)
    (global-set-key (kbd "C-S-c p \\") 'cape-tex)
    (global-set-key (kbd "C-S-c p _") 'cape-tex)
    (global-set-key (kbd "C-S-c p ^") 'cape-tex)
    (global-set-key (kbd "C-S-c p &") 'cape-sgml)
    (global-set-key (kbd "C-S-c p r") 'cape-rfc1345)
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-cape)
    ;;; config-cape.el ends here
    #+end_src
** dabbrev
   :PROPERTIES:
   :header-args: :tangle (expand-file-name "modules/config-dabbrev.el" user-emacs-directory)
   :END:
*** header
    #+begin_src emacs-lisp
    ;;; config-dabbrev.el --- Summary -*- lexical-binding: t -*-
    ;;; Commentary:
    ;; This file is auto-generated from `config.org'
    ;; See `https://java281.dynv6.net/~alexforsale/posts/Emacs-Configuration.html'
    ;;; Code:
    #+end_src
*** package
    #+begin_src emacs-lisp
    (straight-use-package 'dabbrev)
    #+end_src
*** config
    #+begin_src emacs-lisp
    (require 'dabbrev)
    (global-set-key (kbd "M-/") 'dabbrev-completion)
    (global-set-key (kbd "C-M-/") 'dabbrev-expand)
    (customize-set-variable 'dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'"))
    #+end_src
*** Footer
    #+begin_src emacs-lisp
    (provide 'config-dabbrev)
    ;;; config-dabbrev.el ends here
    #+end_src

* local-variables

* Footnotes
[fn:2] https://www.emacswiki.org/emacs/GccEmacs

[fn:1] https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html
  # Local Variables:
  # eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t)
  # End:
